/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.35
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

#define SWIG_DIRECTORS

#ifdef __cplusplus
template<typename T> class SwigValueWrapper {
    T *tt;
public:
    SwigValueWrapper() : tt(0) { }
    SwigValueWrapper(const SwigValueWrapper<T>& rhs) : tt(new T(*rhs.tt)) { }
    SwigValueWrapper(const T& t) : tt(new T(t)) { }
    ~SwigValueWrapper() { delete tt; } 
    SwigValueWrapper& operator=(const T& t) { delete tt; tt = new T(t); return *this; }
    operator T&() const { return *tt; }
    T *operator&() { return tt; }
private:
    SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__)) 
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__)) 
# else
#   define SWIGUNUSED 
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED 
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif 
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif



/* Fix for jlong on some versions of gcc on Windows */
#if defined(__GNUC__) && !defined(__INTELC__)
  typedef long long __int64;
#endif

/* Fix for jlong on 64-bit x86 Solaris */
#if defined(__x86_64)
# ifdef _LP64
#   undef _LP64
# endif
#endif

#include <jni.h>
#include <stdlib.h>
#include <string.h>


/* Support for throwing Java exceptions */
typedef enum {
  SWIG_JavaOutOfMemoryError = 1, 
  SWIG_JavaIOException, 
  SWIG_JavaRuntimeException, 
  SWIG_JavaIndexOutOfBoundsException,
  SWIG_JavaArithmeticException,
  SWIG_JavaIllegalArgumentException,
  SWIG_JavaNullPointerException,
  SWIG_JavaDirectorPureVirtual,
  SWIG_JavaUnknownError
} SWIG_JavaExceptionCodes;

typedef struct {
  SWIG_JavaExceptionCodes code;
  const char *java_exception;
} SWIG_JavaExceptions_t;


static void SWIGUNUSED SWIG_JavaThrowException(JNIEnv *jenv, SWIG_JavaExceptionCodes code, const char *msg) {
  jclass excep;
  static const SWIG_JavaExceptions_t java_exceptions[] = {
    { SWIG_JavaOutOfMemoryError, "java/lang/OutOfMemoryError" },
    { SWIG_JavaIOException, "java/io/IOException" },
    { SWIG_JavaRuntimeException, "java/lang/RuntimeException" },
    { SWIG_JavaIndexOutOfBoundsException, "java/lang/IndexOutOfBoundsException" },
    { SWIG_JavaArithmeticException, "java/lang/ArithmeticException" },
    { SWIG_JavaIllegalArgumentException, "java/lang/IllegalArgumentException" },
    { SWIG_JavaNullPointerException, "java/lang/NullPointerException" },
    { SWIG_JavaDirectorPureVirtual, "java/lang/RuntimeException" },
    { SWIG_JavaUnknownError,  "java/lang/UnknownError" },
    { (SWIG_JavaExceptionCodes)0,  "java/lang/UnknownError" } };
  const SWIG_JavaExceptions_t *except_ptr = java_exceptions;

  while (except_ptr->code != code && except_ptr->code)
    except_ptr++;

  jenv->ExceptionClear();
  excep = jenv->FindClass(except_ptr->java_exception);
  if (excep)
    jenv->ThrowNew(excep, msg);
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, msg); return nullreturn; } else

/* -----------------------------------------------------------------------------
 * See the LICENSE file for information on copyright, usage and redistribution
 * of SWIG, and the README file for authors - http://www.swig.org/release.html.
 *
 * director.swg
 *
 * This file contains support for director classes that proxy
 * method calls from C++ to Java extensions.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus

#if defined(DEBUG_DIRECTOR_OWNED)
#include <iostream>
#endif

namespace Swig {
  /* Java object wrapper */
  class JObjectWrapper {
  public:
    JObjectWrapper() : jthis_(NULL), weak_global_(true) {
    }

    ~JObjectWrapper() {
      jthis_ = NULL;
      weak_global_ = true;
    }

    bool set(JNIEnv *jenv, jobject jobj, bool mem_own, bool weak_global) {
      if (!jthis_) {
        weak_global_ = weak_global;
        if (jobj)
          jthis_ = ((weak_global_ || !mem_own) ? jenv->NewWeakGlobalRef(jobj) : jenv->NewGlobalRef(jobj));
#if defined(DEBUG_DIRECTOR_OWNED)
        std::cout << "JObjectWrapper::set(" << jobj << ", " << (weak_global ? "weak_global" : "global_ref") << ") -> " << jthis_ << std::endl;
#endif
        return true;
      } else {
#if defined(DEBUG_DIRECTOR_OWNED)
        std::cout << "JObjectWrapper::set(" << jobj << ", " << (weak_global ? "weak_global" : "global_ref") << ") -> already set" << std::endl;
#endif
        return false;
      }
    }

    jobject get(JNIEnv *jenv) const {
#if defined(DEBUG_DIRECTOR_OWNED)
      std::cout << "JObjectWrapper::get(";
      if (jthis_)
        std::cout << jthis_;
      else
        std::cout << "null";
      std::cout << ") -> return new local ref" << std::endl;
#endif
      return (jthis_ ? jenv->NewLocalRef(jthis_) : jthis_);
    }

    void release(JNIEnv *jenv) {
#if defined(DEBUG_DIRECTOR_OWNED)
      std::cout << "JObjectWrapper::release(" << jthis_ << "): " << (weak_global_ ? "weak global ref" : "global ref") << std::endl;
#endif
      if (jthis_) {
        if (weak_global_) {
          if (jenv->IsSameObject(jthis_, NULL) == JNI_FALSE)
            jenv->DeleteWeakGlobalRef((jweak)jthis_);
        } else
          jenv->DeleteGlobalRef(jthis_);
      }

      jthis_ = NULL;
      weak_global_ = true;
    }

    jobject peek() {
      return jthis_;
    }

    /* Java proxy releases ownership of C++ object, C++ object is now
       responsible for destruction (creates NewGlobalRef to pin Java
       proxy) */
    void java_change_ownership(JNIEnv *jenv, jobject jself, bool take_or_release) {
      if (take_or_release) {  /* Java takes ownership of C++ object's lifetime. */
        if (!weak_global_) {
          jenv->DeleteGlobalRef(jthis_);
          jthis_ = jenv->NewWeakGlobalRef(jself);
          weak_global_ = true;
        }
      } else { /* Java releases ownership of C++ object's lifetime */
        if (weak_global_) {
          jenv->DeleteWeakGlobalRef((jweak)jthis_);
          jthis_ = jenv->NewGlobalRef(jself);
          weak_global_ = false;
        }
      }
    }

  private:
    /* pointer to Java object */
    jobject jthis_;
    /* Local or global reference flag */
    bool weak_global_;
  };

  /* director base class */
  class Director {
    /* pointer to Java virtual machine */
    JavaVM *swig_jvm_;

  protected:
#if defined (_MSC_VER) && (_MSC_VER<1300)
    class JNIEnvWrapper;
    friend class JNIEnvWrapper;
#endif
    /* Utility class for managing the JNI environment */
    class JNIEnvWrapper {
      const Director *director_;
      JNIEnv *jenv_;
    public:
      JNIEnvWrapper(const Director *director) : director_(director), jenv_(0) {
        director_->swig_jvm_->AttachCurrentThread((void **) &jenv_, NULL);
      }
      ~JNIEnvWrapper() {
// Some JVMs, eg JDK 1.4.2 and lower on Solaris have a bug and crash with the DetachCurrentThread call.
// However, without this call, the JVM hangs on exit when the thread was not created by the JVM and creates a memory leak.
#if !defined(SWIG_JAVA_NO_DETACH_CURRENT_THREAD)
        director_->swig_jvm_->DetachCurrentThread();
#endif
      }
      JNIEnv *getJNIEnv() const {
        return jenv_;
      }
    };

    /* Java object wrapper */
    JObjectWrapper swig_self_;

    /* Disconnect director from Java object */
    void swig_disconnect_director_self(const char *disconn_method) {
      JNIEnvWrapper jnienv(this) ;
      JNIEnv *jenv = jnienv.getJNIEnv() ;
      jobject jobj = swig_self_.peek();
#if defined(DEBUG_DIRECTOR_OWNED)
      std::cout << "Swig::Director::disconnect_director_self(" << jobj << ")" << std::endl;
#endif
      if (jobj && jenv->IsSameObject(jobj, NULL) == JNI_FALSE) {
        jmethodID disconn_meth = jenv->GetMethodID(jenv->GetObjectClass(jobj), disconn_method, "()V");
        if (disconn_meth) {
#if defined(DEBUG_DIRECTOR_OWNED)
          std::cout << "Swig::Director::disconnect_director_self upcall to " << disconn_method << std::endl;
#endif
          jenv->CallVoidMethod(jobj, disconn_meth);
        }
      }
    }

  public:
    Director(JNIEnv *jenv) : swig_jvm_((JavaVM *) NULL), swig_self_() {
      /* Acquire the Java VM pointer */
      jenv->GetJavaVM(&swig_jvm_);
    }

    virtual ~Director() {
      JNIEnvWrapper jnienv(this) ;
      JNIEnv *jenv = jnienv.getJNIEnv() ;
      swig_self_.release(jenv);
    }

    bool swig_set_self(JNIEnv *jenv, jobject jself, bool mem_own, bool weak_global) {
      return swig_self_.set(jenv, jself, mem_own, weak_global);
    }

    jobject swig_get_self(JNIEnv *jenv) const {
      return swig_self_.get(jenv);
    }

    // Change C++ object's ownership, relative to Java
    void swig_java_change_ownership(JNIEnv *jenv, jobject jself, bool take_or_release) {
      swig_self_.java_change_ownership(jenv, jself, take_or_release);
    }
  };
}

#endif /* __cplusplus */


namespace Swig {
  static jclass jclass_playercore_javaJNI = NULL;
  static jmethodID director_methids[24];
}

#if defined(SWIG_NOINCLUDE) || defined(SWIG_NOARRAYS)


int SWIG_JavaArrayInBool (JNIEnv *jenv, jboolean **jarr, bool **carr, jbooleanArray input);
void SWIG_JavaArrayArgoutBool (JNIEnv *jenv, jboolean *jarr, bool *carr, jbooleanArray input);
jbooleanArray SWIG_JavaArrayOutBool (JNIEnv *jenv, bool *result, jsize sz);


int SWIG_JavaArrayInSchar (JNIEnv *jenv, jbyte **jarr, signed char **carr, jbyteArray input);
void SWIG_JavaArrayArgoutSchar (JNIEnv *jenv, jbyte *jarr, signed char *carr, jbyteArray input);
jbyteArray SWIG_JavaArrayOutSchar (JNIEnv *jenv, signed char *result, jsize sz);


int SWIG_JavaArrayInUchar (JNIEnv *jenv, jshort **jarr, unsigned char **carr, jshortArray input);
void SWIG_JavaArrayArgoutUchar (JNIEnv *jenv, jshort *jarr, unsigned char *carr, jshortArray input);
jshortArray SWIG_JavaArrayOutUchar (JNIEnv *jenv, unsigned char *result, jsize sz);


int SWIG_JavaArrayInShort (JNIEnv *jenv, jshort **jarr, short **carr, jshortArray input);
void SWIG_JavaArrayArgoutShort (JNIEnv *jenv, jshort *jarr, short *carr, jshortArray input);
jshortArray SWIG_JavaArrayOutShort (JNIEnv *jenv, short *result, jsize sz);


int SWIG_JavaArrayInUshort (JNIEnv *jenv, jint **jarr, unsigned short **carr, jintArray input);
void SWIG_JavaArrayArgoutUshort (JNIEnv *jenv, jint *jarr, unsigned short *carr, jintArray input);
jintArray SWIG_JavaArrayOutUshort (JNIEnv *jenv, unsigned short *result, jsize sz);


int SWIG_JavaArrayInInt (JNIEnv *jenv, jint **jarr, int **carr, jintArray input);
void SWIG_JavaArrayArgoutInt (JNIEnv *jenv, jint *jarr, int *carr, jintArray input);
jintArray SWIG_JavaArrayOutInt (JNIEnv *jenv, int *result, jsize sz);


int SWIG_JavaArrayInUint (JNIEnv *jenv, jlong **jarr, unsigned int **carr, jlongArray input);
void SWIG_JavaArrayArgoutUint (JNIEnv *jenv, jlong *jarr, unsigned int *carr, jlongArray input);
jlongArray SWIG_JavaArrayOutUint (JNIEnv *jenv, unsigned int *result, jsize sz);


int SWIG_JavaArrayInLong (JNIEnv *jenv, jint **jarr, long **carr, jintArray input);
void SWIG_JavaArrayArgoutLong (JNIEnv *jenv, jint *jarr, long *carr, jintArray input);
jintArray SWIG_JavaArrayOutLong (JNIEnv *jenv, long *result, jsize sz);


int SWIG_JavaArrayInUlong (JNIEnv *jenv, jlong **jarr, unsigned long **carr, jlongArray input);
void SWIG_JavaArrayArgoutUlong (JNIEnv *jenv, jlong *jarr, unsigned long *carr, jlongArray input);
jlongArray SWIG_JavaArrayOutUlong (JNIEnv *jenv, unsigned long *result, jsize sz);


int SWIG_JavaArrayInLonglong (JNIEnv *jenv, jlong **jarr, jlong **carr, jlongArray input);
void SWIG_JavaArrayArgoutLonglong (JNIEnv *jenv, jlong *jarr, jlong *carr, jlongArray input);
jlongArray SWIG_JavaArrayOutLonglong (JNIEnv *jenv, jlong *result, jsize sz);


int SWIG_JavaArrayInFloat (JNIEnv *jenv, jfloat **jarr, float **carr, jfloatArray input);
void SWIG_JavaArrayArgoutFloat (JNIEnv *jenv, jfloat *jarr, float *carr, jfloatArray input);
jfloatArray SWIG_JavaArrayOutFloat (JNIEnv *jenv, float *result, jsize sz);


int SWIG_JavaArrayInDouble (JNIEnv *jenv, jdouble **jarr, double **carr, jdoubleArray input);
void SWIG_JavaArrayArgoutDouble (JNIEnv *jenv, jdouble *jarr, double *carr, jdoubleArray input);
jdoubleArray SWIG_JavaArrayOutDouble (JNIEnv *jenv, double *result, jsize sz);


#else


/* bool[] support */
int SWIG_JavaArrayInBool (JNIEnv *jenv, jboolean **jarr, bool **carr, jbooleanArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetBooleanArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new bool[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = ((*jarr)[i] != 0);
  return 1;
}

void SWIG_JavaArrayArgoutBool (JNIEnv *jenv, jboolean *jarr, bool *carr, jbooleanArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jboolean)carr[i];
  jenv->ReleaseBooleanArrayElements(input, jarr, 0);
}

jbooleanArray SWIG_JavaArrayOutBool (JNIEnv *jenv, bool *result, jsize sz) {
  jboolean *arr;
  int i;
  jbooleanArray jresult = jenv->NewBooleanArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetBooleanArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jboolean)result[i];
  jenv->ReleaseBooleanArrayElements(jresult, arr, 0);
  return jresult;
}


/* signed char[] support */
int SWIG_JavaArrayInSchar (JNIEnv *jenv, jbyte **jarr, signed char **carr, jbyteArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetByteArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new signed char[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (signed char)(*jarr)[i];
  return 1;
}

void SWIG_JavaArrayArgoutSchar (JNIEnv *jenv, jbyte *jarr, signed char *carr, jbyteArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jbyte)carr[i];
  jenv->ReleaseByteArrayElements(input, jarr, 0);
}

jbyteArray SWIG_JavaArrayOutSchar (JNIEnv *jenv, signed char *result, jsize sz) {
  jbyte *arr;
  int i;
  jbyteArray jresult = jenv->NewByteArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetByteArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jbyte)result[i];
  jenv->ReleaseByteArrayElements(jresult, arr, 0);
  return jresult;
}


/* unsigned char[] support */
int SWIG_JavaArrayInUchar (JNIEnv *jenv, jshort **jarr, unsigned char **carr, jshortArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetShortArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new unsigned char[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (unsigned char)(*jarr)[i];
  return 1;
}

void SWIG_JavaArrayArgoutUchar (JNIEnv *jenv, jshort *jarr, unsigned char *carr, jshortArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jshort)carr[i];
  jenv->ReleaseShortArrayElements(input, jarr, 0);
}

jshortArray SWIG_JavaArrayOutUchar (JNIEnv *jenv, unsigned char *result, jsize sz) {
  jshort *arr;
  int i;
  jshortArray jresult = jenv->NewShortArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetShortArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jshort)result[i];
  jenv->ReleaseShortArrayElements(jresult, arr, 0);
  return jresult;
}


/* short[] support */
int SWIG_JavaArrayInShort (JNIEnv *jenv, jshort **jarr, short **carr, jshortArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetShortArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new short[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (short)(*jarr)[i];
  return 1;
}

void SWIG_JavaArrayArgoutShort (JNIEnv *jenv, jshort *jarr, short *carr, jshortArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jshort)carr[i];
  jenv->ReleaseShortArrayElements(input, jarr, 0);
}

jshortArray SWIG_JavaArrayOutShort (JNIEnv *jenv, short *result, jsize sz) {
  jshort *arr;
  int i;
  jshortArray jresult = jenv->NewShortArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetShortArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jshort)result[i];
  jenv->ReleaseShortArrayElements(jresult, arr, 0);
  return jresult;
}


/* unsigned short[] support */
int SWIG_JavaArrayInUshort (JNIEnv *jenv, jint **jarr, unsigned short **carr, jintArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetIntArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new unsigned short[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (unsigned short)(*jarr)[i];
  return 1;
}

void SWIG_JavaArrayArgoutUshort (JNIEnv *jenv, jint *jarr, unsigned short *carr, jintArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jint)carr[i];
  jenv->ReleaseIntArrayElements(input, jarr, 0);
}

jintArray SWIG_JavaArrayOutUshort (JNIEnv *jenv, unsigned short *result, jsize sz) {
  jint *arr;
  int i;
  jintArray jresult = jenv->NewIntArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetIntArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jint)result[i];
  jenv->ReleaseIntArrayElements(jresult, arr, 0);
  return jresult;
}


/* int[] support */
int SWIG_JavaArrayInInt (JNIEnv *jenv, jint **jarr, int **carr, jintArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetIntArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new int[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (int)(*jarr)[i];
  return 1;
}

void SWIG_JavaArrayArgoutInt (JNIEnv *jenv, jint *jarr, int *carr, jintArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jint)carr[i];
  jenv->ReleaseIntArrayElements(input, jarr, 0);
}

jintArray SWIG_JavaArrayOutInt (JNIEnv *jenv, int *result, jsize sz) {
  jint *arr;
  int i;
  jintArray jresult = jenv->NewIntArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetIntArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jint)result[i];
  jenv->ReleaseIntArrayElements(jresult, arr, 0);
  return jresult;
}


/* unsigned int[] support */
int SWIG_JavaArrayInUint (JNIEnv *jenv, jlong **jarr, unsigned int **carr, jlongArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetLongArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new unsigned int[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (unsigned int)(*jarr)[i];
  return 1;
}

void SWIG_JavaArrayArgoutUint (JNIEnv *jenv, jlong *jarr, unsigned int *carr, jlongArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jlong)carr[i];
  jenv->ReleaseLongArrayElements(input, jarr, 0);
}

jlongArray SWIG_JavaArrayOutUint (JNIEnv *jenv, unsigned int *result, jsize sz) {
  jlong *arr;
  int i;
  jlongArray jresult = jenv->NewLongArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetLongArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jlong)result[i];
  jenv->ReleaseLongArrayElements(jresult, arr, 0);
  return jresult;
}


/* long[] support */
int SWIG_JavaArrayInLong (JNIEnv *jenv, jint **jarr, long **carr, jintArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetIntArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new long[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (long)(*jarr)[i];
  return 1;
}

void SWIG_JavaArrayArgoutLong (JNIEnv *jenv, jint *jarr, long *carr, jintArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jint)carr[i];
  jenv->ReleaseIntArrayElements(input, jarr, 0);
}

jintArray SWIG_JavaArrayOutLong (JNIEnv *jenv, long *result, jsize sz) {
  jint *arr;
  int i;
  jintArray jresult = jenv->NewIntArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetIntArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jint)result[i];
  jenv->ReleaseIntArrayElements(jresult, arr, 0);
  return jresult;
}


/* unsigned long[] support */
int SWIG_JavaArrayInUlong (JNIEnv *jenv, jlong **jarr, unsigned long **carr, jlongArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetLongArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new unsigned long[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (unsigned long)(*jarr)[i];
  return 1;
}

void SWIG_JavaArrayArgoutUlong (JNIEnv *jenv, jlong *jarr, unsigned long *carr, jlongArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jlong)carr[i];
  jenv->ReleaseLongArrayElements(input, jarr, 0);
}

jlongArray SWIG_JavaArrayOutUlong (JNIEnv *jenv, unsigned long *result, jsize sz) {
  jlong *arr;
  int i;
  jlongArray jresult = jenv->NewLongArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetLongArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jlong)result[i];
  jenv->ReleaseLongArrayElements(jresult, arr, 0);
  return jresult;
}


/* jlong[] support */
int SWIG_JavaArrayInLonglong (JNIEnv *jenv, jlong **jarr, jlong **carr, jlongArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetLongArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new jlong[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (jlong)(*jarr)[i];
  return 1;
}

void SWIG_JavaArrayArgoutLonglong (JNIEnv *jenv, jlong *jarr, jlong *carr, jlongArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jlong)carr[i];
  jenv->ReleaseLongArrayElements(input, jarr, 0);
}

jlongArray SWIG_JavaArrayOutLonglong (JNIEnv *jenv, jlong *result, jsize sz) {
  jlong *arr;
  int i;
  jlongArray jresult = jenv->NewLongArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetLongArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jlong)result[i];
  jenv->ReleaseLongArrayElements(jresult, arr, 0);
  return jresult;
}


/* float[] support */
int SWIG_JavaArrayInFloat (JNIEnv *jenv, jfloat **jarr, float **carr, jfloatArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetFloatArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new float[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (float)(*jarr)[i];
  return 1;
}

void SWIG_JavaArrayArgoutFloat (JNIEnv *jenv, jfloat *jarr, float *carr, jfloatArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jfloat)carr[i];
  jenv->ReleaseFloatArrayElements(input, jarr, 0);
}

jfloatArray SWIG_JavaArrayOutFloat (JNIEnv *jenv, float *result, jsize sz) {
  jfloat *arr;
  int i;
  jfloatArray jresult = jenv->NewFloatArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetFloatArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jfloat)result[i];
  jenv->ReleaseFloatArrayElements(jresult, arr, 0);
  return jresult;
}


/* double[] support */
int SWIG_JavaArrayInDouble (JNIEnv *jenv, jdouble **jarr, double **carr, jdoubleArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetDoubleArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new double[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (double)(*jarr)[i];
  return 1;
}

void SWIG_JavaArrayArgoutDouble (JNIEnv *jenv, jdouble *jarr, double *carr, jdoubleArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jdouble)carr[i];
  jenv->ReleaseDoubleArrayElements(input, jarr, 0);
}

jdoubleArray SWIG_JavaArrayOutDouble (JNIEnv *jenv, double *result, jsize sz) {
  jdouble *arr;
  int i;
  jdoubleArray jresult = jenv->NewDoubleArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetDoubleArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jdouble)result[i];
  jenv->ReleaseDoubleArrayElements(jresult, arr, 0);
  return jresult;
}


#endif


#include <libplayercore/playercore.h>
#include <server/libplayerdrivers/driverregistry.h>



size_t player_devaddr_t_sizeof(void)
{
  return(sizeof(player_devaddr_t));
}
player_devaddr_t* buf_to_player_devaddr_t(void* buf)
{
  return((player_devaddr_t*)(buf));
}
void* player_devaddr_t_to_buf(player_devaddr_t* msg)
{
  return((void*)(msg));
}
size_t player_msghdr_t_sizeof(void)
{
  return(sizeof(player_msghdr_t));
}
player_msghdr_t* buf_to_player_msghdr_t(void* buf)
{
  return((player_msghdr_t*)(buf));
}
void* player_msghdr_t_to_buf(player_msghdr_t* msg)
{
  return((void*)(msg));
}
size_t player_null_t_sizeof(void)
{
  return(sizeof(player_null_t));
}
player_null_t* buf_to_player_null_t(void* buf)
{
  return((player_null_t*)(buf));
}
void* player_null_t_to_buf(player_null_t* msg)
{
  return((void*)(msg));
}
size_t player_point_2d_t_sizeof(void)
{
  return(sizeof(player_point_2d_t));
}
player_point_2d_t* buf_to_player_point_2d_t(void* buf)
{
  return((player_point_2d_t*)(buf));
}
void* player_point_2d_t_to_buf(player_point_2d_t* msg)
{
  return((void*)(msg));
}
size_t player_point_3d_t_sizeof(void)
{
  return(sizeof(player_point_3d_t));
}
player_point_3d_t* buf_to_player_point_3d_t(void* buf)
{
  return((player_point_3d_t*)(buf));
}
void* player_point_3d_t_to_buf(player_point_3d_t* msg)
{
  return((void*)(msg));
}
size_t player_orientation_3d_t_sizeof(void)
{
  return(sizeof(player_orientation_3d_t));
}
player_orientation_3d_t* buf_to_player_orientation_3d_t(void* buf)
{
  return((player_orientation_3d_t*)(buf));
}
void* player_orientation_3d_t_to_buf(player_orientation_3d_t* msg)
{
  return((void*)(msg));
}
size_t player_pose2d_t_sizeof(void)
{
  return(sizeof(player_pose2d_t));
}
player_pose2d_t* buf_to_player_pose2d_t(void* buf)
{
  return((player_pose2d_t*)(buf));
}
void* player_pose2d_t_to_buf(player_pose2d_t* msg)
{
  return((void*)(msg));
}
size_t player_pose3d_t_sizeof(void)
{
  return(sizeof(player_pose3d_t));
}
player_pose3d_t* buf_to_player_pose3d_t(void* buf)
{
  return((player_pose3d_t*)(buf));
}
void* player_pose3d_t_to_buf(player_pose3d_t* msg)
{
  return((void*)(msg));
}
size_t player_bbox2d_t_sizeof(void)
{
  return(sizeof(player_bbox2d_t));
}
player_bbox2d_t* buf_to_player_bbox2d_t(void* buf)
{
  return((player_bbox2d_t*)(buf));
}
void* player_bbox2d_t_to_buf(player_bbox2d_t* msg)
{
  return((void*)(msg));
}
size_t player_bbox3d_t_sizeof(void)
{
  return(sizeof(player_bbox3d_t));
}
player_bbox3d_t* buf_to_player_bbox3d_t(void* buf)
{
  return((player_bbox3d_t*)(buf));
}
void* player_bbox3d_t_to_buf(player_bbox3d_t* msg)
{
  return((void*)(msg));
}
size_t player_blackboard_entry_t_sizeof(void)
{
  return(sizeof(player_blackboard_entry_t));
}
player_blackboard_entry_t* buf_to_player_blackboard_entry_t(void* buf)
{
  return((player_blackboard_entry_t*)(buf));
}
void* player_blackboard_entry_t_to_buf(player_blackboard_entry_t* msg)
{
  return((void*)(msg));
}
size_t player_segment_t_sizeof(void)
{
  return(sizeof(player_segment_t));
}
player_segment_t* buf_to_player_segment_t(void* buf)
{
  return((player_segment_t*)(buf));
}
void* player_segment_t_to_buf(player_segment_t* msg)
{
  return((void*)(msg));
}
size_t player_extent2d_t_sizeof(void)
{
  return(sizeof(player_extent2d_t));
}
player_extent2d_t* buf_to_player_extent2d_t(void* buf)
{
  return((player_extent2d_t*)(buf));
}
void* player_extent2d_t_to_buf(player_extent2d_t* msg)
{
  return((void*)(msg));
}
size_t player_color_t_sizeof(void)
{
  return(sizeof(player_color_t));
}
player_color_t* buf_to_player_color_t(void* buf)
{
  return((player_color_t*)(buf));
}
void* player_color_t_to_buf(player_color_t* msg)
{
  return((void*)(msg));
}
size_t player_bool_t_sizeof(void)
{
  return(sizeof(player_bool_t));
}
player_bool_t* buf_to_player_bool_t(void* buf)
{
  return((player_bool_t*)(buf));
}
void* player_bool_t_to_buf(player_bool_t* msg)
{
  return((void*)(msg));
}
size_t player_uint32_t_sizeof(void)
{
  return(sizeof(player_uint32_t));
}
player_uint32_t* buf_to_player_uint32_t(void* buf)
{
  return((player_uint32_t*)(buf));
}
void* player_uint32_t_to_buf(player_uint32_t* msg)
{
  return((void*)(msg));
}
size_t player_capabilities_req_t_sizeof(void)
{
  return(sizeof(player_capabilities_req_t));
}
player_capabilities_req_t* buf_to_player_capabilities_req_t(void* buf)
{
  return((player_capabilities_req_t*)(buf));
}
void* player_capabilities_req_t_to_buf(player_capabilities_req_t* msg)
{
  return((void*)(msg));
}
size_t player_intprop_req_t_sizeof(void)
{
  return(sizeof(player_intprop_req_t));
}
player_intprop_req_t* buf_to_player_intprop_req_t(void* buf)
{
  return((player_intprop_req_t*)(buf));
}
void* player_intprop_req_t_to_buf(player_intprop_req_t* msg)
{
  return((void*)(msg));
}
size_t player_dblprop_req_t_sizeof(void)
{
  return(sizeof(player_dblprop_req_t));
}
player_dblprop_req_t* buf_to_player_dblprop_req_t(void* buf)
{
  return((player_dblprop_req_t*)(buf));
}
void* player_dblprop_req_t_to_buf(player_dblprop_req_t* msg)
{
  return((void*)(msg));
}
size_t player_strprop_req_t_sizeof(void)
{
  return(sizeof(player_strprop_req_t));
}
player_strprop_req_t* buf_to_player_strprop_req_t(void* buf)
{
  return((player_strprop_req_t*)(buf));
}
void* player_strprop_req_t_to_buf(player_strprop_req_t* msg)
{
  return((void*)(msg));
}




/* ---------------------------------------------------
 * C++ director class methods
 * --------------------------------------------------- */

#include "playercore_java_wrap.h"

SwigDirector_Driver::SwigDirector_Driver(JNIEnv *jenv, ConfigFile *cf, int section, bool overwrite_cmds, size_t queue_maxlen, int interf) : Driver(cf, section, overwrite_cmds, queue_maxlen, interf), Swig::Director(jenv) {
}

SwigDirector_Driver::SwigDirector_Driver(JNIEnv *jenv, ConfigFile *cf, int section, bool overwrite_cmds, size_t queue_maxlen) : Driver(cf, section, overwrite_cmds, queue_maxlen), Swig::Director(jenv) {
}

void SwigDirector_Driver::StartThread() {
  JNIEnvWrapper jnienv(this) ;
  JNIEnv * jenv = jnienv.getJNIEnv() ;
  jobject jobj = (jobject) NULL ;
  
  if (!swig_override[0]) {
    Driver::StartThread();
    return;
  }
  jobj = swig_get_self(jenv);
  if (jobj && jenv->IsSameObject(jobj, NULL) == JNI_FALSE) {
    jenv->CallStaticVoidMethod(Swig::jclass_playercore_javaJNI, Swig::director_methids[0], jobj);
    if (jenv->ExceptionOccurred()) return ;
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (jobj) jenv->DeleteLocalRef(jobj);
}

void SwigDirector_Driver::StopThread() {
  JNIEnvWrapper jnienv(this) ;
  JNIEnv * jenv = jnienv.getJNIEnv() ;
  jobject jobj = (jobject) NULL ;
  
  if (!swig_override[1]) {
    Driver::StopThread();
    return;
  }
  jobj = swig_get_self(jenv);
  if (jobj && jenv->IsSameObject(jobj, NULL) == JNI_FALSE) {
    jenv->CallStaticVoidMethod(Swig::jclass_playercore_javaJNI, Swig::director_methids[1], jobj);
    if (jenv->ExceptionOccurred()) return ;
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (jobj) jenv->DeleteLocalRef(jobj);
}

void SwigDirector_Driver::Publish(player_devaddr_t addr, QueuePointer &queue, uint8_t type, uint8_t subtype, void *src, size_t deprecated, double *timestamp, bool copy) {
  JNIEnvWrapper jnienv(this) ;
  JNIEnv * jenv = jnienv.getJNIEnv() ;
  jobject jobj = (jobject) NULL ;
  jlong jaddr  ;
  jlong jqueue = 0 ;
  jshort jtype  ;
  jshort jsubtype  ;
  jlong jsrc = 0 ;
  jlong jdeprecated  ;
  jlong jtimestamp = 0 ;
  jboolean jcopy  ;
  
  if (!swig_override[2]) {
    Driver::Publish(addr,queue,type,subtype,src,deprecated,timestamp,copy);
    return;
  }
  jobj = swig_get_self(jenv);
  if (jobj && jenv->IsSameObject(jobj, NULL) == JNI_FALSE) {
    jaddr = 0;
    *((player_devaddr_t **)&jaddr) = &addr; 
    *(QueuePointer **)&jqueue = (QueuePointer *) &queue; 
    jtype = (jshort) type;
    jsubtype = (jshort) subtype;
    *((void **)&jsrc) = (void *) src; 
    jdeprecated = (jlong) deprecated;
    *((double **)&jtimestamp) = (double *) timestamp; 
    jcopy = (jboolean) copy;
    jenv->CallStaticVoidMethod(Swig::jclass_playercore_javaJNI, Swig::director_methids[2], jobj, jaddr, jqueue, jtype, jsubtype, jsrc, jdeprecated, jtimestamp, jcopy);
    if (jenv->ExceptionOccurred()) return ;
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (jobj) jenv->DeleteLocalRef(jobj);
}

void SwigDirector_Driver::Publish(player_devaddr_t addr, uint8_t type, uint8_t subtype, void *src, size_t deprecated, double *timestamp, bool copy) {
  JNIEnvWrapper jnienv(this) ;
  JNIEnv * jenv = jnienv.getJNIEnv() ;
  jobject jobj = (jobject) NULL ;
  jlong jaddr  ;
  jshort jtype  ;
  jshort jsubtype  ;
  jlong jsrc = 0 ;
  jlong jdeprecated  ;
  jlong jtimestamp = 0 ;
  jboolean jcopy  ;
  
  if (!swig_override[7]) {
    Driver::Publish(addr,type,subtype,src,deprecated,timestamp,copy);
    return;
  }
  jobj = swig_get_self(jenv);
  if (jobj && jenv->IsSameObject(jobj, NULL) == JNI_FALSE) {
    jaddr = 0;
    *((player_devaddr_t **)&jaddr) = &addr; 
    jtype = (jshort) type;
    jsubtype = (jshort) subtype;
    *((void **)&jsrc) = (void *) src; 
    jdeprecated = (jlong) deprecated;
    *((double **)&jtimestamp) = (double *) timestamp; 
    jcopy = (jboolean) copy;
    jenv->CallStaticVoidMethod(Swig::jclass_playercore_javaJNI, Swig::director_methids[7], jobj, jaddr, jtype, jsubtype, jsrc, jdeprecated, jtimestamp, jcopy);
    if (jenv->ExceptionOccurred()) return ;
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (jobj) jenv->DeleteLocalRef(jobj);
}

void SwigDirector_Driver::Publish(QueuePointer &queue, player_msghdr_t *hdr, void *src, bool copy) {
  JNIEnvWrapper jnienv(this) ;
  JNIEnv * jenv = jnienv.getJNIEnv() ;
  jobject jobj = (jobject) NULL ;
  jlong jqueue = 0 ;
  jlong jhdr = 0 ;
  jlong jsrc = 0 ;
  jboolean jcopy  ;
  
  if (!swig_override[12]) {
    Driver::Publish(queue,hdr,src,copy);
    return;
  }
  jobj = swig_get_self(jenv);
  if (jobj && jenv->IsSameObject(jobj, NULL) == JNI_FALSE) {
    *(QueuePointer **)&jqueue = (QueuePointer *) &queue; 
    *((player_msghdr_t **)&jhdr) = (player_msghdr_t *) hdr; 
    *((void **)&jsrc) = (void *) src; 
    jcopy = (jboolean) copy;
    jenv->CallStaticVoidMethod(Swig::jclass_playercore_javaJNI, Swig::director_methids[12], jobj, jqueue, jhdr, jsrc, jcopy);
    if (jenv->ExceptionOccurred()) return ;
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (jobj) jenv->DeleteLocalRef(jobj);
}

void SwigDirector_Driver::Publish(player_msghdr_t *hdr, void *src, bool copy) {
  JNIEnvWrapper jnienv(this) ;
  JNIEnv * jenv = jnienv.getJNIEnv() ;
  jobject jobj = (jobject) NULL ;
  jlong jhdr = 0 ;
  jlong jsrc = 0 ;
  jboolean jcopy  ;
  
  if (!swig_override[14]) {
    Driver::Publish(hdr,src,copy);
    return;
  }
  jobj = swig_get_self(jenv);
  if (jobj && jenv->IsSameObject(jobj, NULL) == JNI_FALSE) {
    *((player_msghdr_t **)&jhdr) = (player_msghdr_t *) hdr; 
    *((void **)&jsrc) = (void *) src; 
    jcopy = (jboolean) copy;
    jenv->CallStaticVoidMethod(Swig::jclass_playercore_javaJNI, Swig::director_methids[14], jobj, jhdr, jsrc, jcopy);
    if (jenv->ExceptionOccurred()) return ;
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (jobj) jenv->DeleteLocalRef(jobj);
}

SwigDirector_Driver::~SwigDirector_Driver() {
  swig_disconnect_director_self("swigDirectorDisconnect");
}


int SwigDirector_Driver::Setup() {
  int c_result = SwigValueInit< int >() ;
  jint jresult = 0 ;
  JNIEnvWrapper jnienv(this) ;
  JNIEnv * jenv = jnienv.getJNIEnv() ;
  jobject jobj = (jobject) NULL ;
  
  if (!swig_override[16]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method Driver::Setup.");
    return c_result;
  }
  jobj = swig_get_self(jenv);
  if (jobj && jenv->IsSameObject(jobj, NULL) == JNI_FALSE) {
    jresult = (jint) jenv->CallStaticIntMethod(Swig::jclass_playercore_javaJNI, Swig::director_methids[16], jobj);
    if (jenv->ExceptionOccurred()) return c_result;
    c_result = (int)jresult; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (jobj) jenv->DeleteLocalRef(jobj);
  return c_result;
}

int SwigDirector_Driver::Shutdown() {
  int c_result = SwigValueInit< int >() ;
  jint jresult = 0 ;
  JNIEnvWrapper jnienv(this) ;
  JNIEnv * jenv = jnienv.getJNIEnv() ;
  jobject jobj = (jobject) NULL ;
  
  if (!swig_override[17]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method Driver::Shutdown.");
    return c_result;
  }
  jobj = swig_get_self(jenv);
  if (jobj && jenv->IsSameObject(jobj, NULL) == JNI_FALSE) {
    jresult = (jint) jenv->CallStaticIntMethod(Swig::jclass_playercore_javaJNI, Swig::director_methids[17], jobj);
    if (jenv->ExceptionOccurred()) return c_result;
    c_result = (int)jresult; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (jobj) jenv->DeleteLocalRef(jobj);
  return c_result;
}

void SwigDirector_Driver::Main() {
  JNIEnvWrapper jnienv(this) ;
  JNIEnv * jenv = jnienv.getJNIEnv() ;
  jobject jobj = (jobject) NULL ;
  
  if (!swig_override[18]) {
    Driver::Main();
    return;
  }
  jobj = swig_get_self(jenv);
  if (jobj && jenv->IsSameObject(jobj, NULL) == JNI_FALSE) {
    jenv->CallStaticVoidMethod(Swig::jclass_playercore_javaJNI, Swig::director_methids[18], jobj);
    if (jenv->ExceptionOccurred()) return ;
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (jobj) jenv->DeleteLocalRef(jobj);
}

void SwigDirector_Driver::MainQuit() {
  JNIEnvWrapper jnienv(this) ;
  JNIEnv * jenv = jnienv.getJNIEnv() ;
  jobject jobj = (jobject) NULL ;
  
  if (!swig_override[19]) {
    Driver::MainQuit();
    return;
  }
  jobj = swig_get_self(jenv);
  if (jobj && jenv->IsSameObject(jobj, NULL) == JNI_FALSE) {
    jenv->CallStaticVoidMethod(Swig::jclass_playercore_javaJNI, Swig::director_methids[19], jobj);
    if (jenv->ExceptionOccurred()) return ;
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (jobj) jenv->DeleteLocalRef(jobj);
}

void SwigDirector_Driver::Update() {
  JNIEnvWrapper jnienv(this) ;
  JNIEnv * jenv = jnienv.getJNIEnv() ;
  jobject jobj = (jobject) NULL ;
  
  if (!swig_override[20]) {
    Driver::Update();
    return;
  }
  jobj = swig_get_self(jenv);
  if (jobj && jenv->IsSameObject(jobj, NULL) == JNI_FALSE) {
    jenv->CallStaticVoidMethod(Swig::jclass_playercore_javaJNI, Swig::director_methids[20], jobj);
    if (jenv->ExceptionOccurred()) return ;
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (jobj) jenv->DeleteLocalRef(jobj);
}

int SwigDirector_Driver::ProcessInternalMessages(QueuePointer &resp_queue, player_msghdr *hdr, void *data) {
  int c_result = SwigValueInit< int >() ;
  jint jresult = 0 ;
  JNIEnvWrapper jnienv(this) ;
  JNIEnv * jenv = jnienv.getJNIEnv() ;
  jobject jobj = (jobject) NULL ;
  jlong jresp_queue = 0 ;
  jlong jhdr = 0 ;
  jlong jdata = 0 ;
  
  if (!swig_override[21]) {
    return Driver::ProcessInternalMessages(resp_queue,hdr,data);
  }
  jobj = swig_get_self(jenv);
  if (jobj && jenv->IsSameObject(jobj, NULL) == JNI_FALSE) {
    *(QueuePointer **)&jresp_queue = (QueuePointer *) &resp_queue; 
    *((player_msghdr **)&jhdr) = (player_msghdr *) hdr; 
    *((void **)&jdata) = (void *) data; 
    jresult = (jint) jenv->CallStaticIntMethod(Swig::jclass_playercore_javaJNI, Swig::director_methids[21], jobj, jresp_queue, jhdr, jdata);
    if (jenv->ExceptionOccurred()) return c_result;
    c_result = (int)jresult; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (jobj) jenv->DeleteLocalRef(jobj);
  return c_result;
}

bool SwigDirector_Driver::RegisterProperty(char const *key, Property *prop, ConfigFile *cf, int section) {
  bool c_result = SwigValueInit< bool >() ;
  jboolean jresult = 0 ;
  JNIEnvWrapper jnienv(this) ;
  JNIEnv * jenv = jnienv.getJNIEnv() ;
  jobject jobj = (jobject) NULL ;
  jstring jkey = 0 ;
  jlong jprop = 0 ;
  jlong jcf = 0 ;
  jint jsection  ;
  
  if (!swig_override[22]) {
    return Driver::RegisterProperty(key,prop,cf,section);
  }
  jobj = swig_get_self(jenv);
  if (jobj && jenv->IsSameObject(jobj, NULL) == JNI_FALSE) {
    jkey = 0;
    if (key) {
      jkey = jenv->NewStringUTF((const char *)key);
      if (!jkey) return c_result;
    }
    *((Property **)&jprop) = (Property *) prop; 
    *((ConfigFile **)&jcf) = (ConfigFile *) cf; 
    jsection = (jint) section;
    jresult = (jboolean) jenv->CallStaticBooleanMethod(Swig::jclass_playercore_javaJNI, Swig::director_methids[22], jobj, jkey, jprop, jcf, jsection);
    if (jenv->ExceptionOccurred()) return c_result;
    c_result = jresult ? true : false; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (jobj) jenv->DeleteLocalRef(jobj);
  return c_result;
}

bool SwigDirector_Driver::RegisterProperty(Property *prop, ConfigFile *cf, int section) {
  bool c_result = SwigValueInit< bool >() ;
  jboolean jresult = 0 ;
  JNIEnvWrapper jnienv(this) ;
  JNIEnv * jenv = jnienv.getJNIEnv() ;
  jobject jobj = (jobject) NULL ;
  jlong jprop = 0 ;
  jlong jcf = 0 ;
  jint jsection  ;
  
  if (!swig_override[23]) {
    return Driver::RegisterProperty(prop,cf,section);
  }
  jobj = swig_get_self(jenv);
  if (jobj && jenv->IsSameObject(jobj, NULL) == JNI_FALSE) {
    *((Property **)&jprop) = (Property *) prop; 
    *((ConfigFile **)&jcf) = (ConfigFile *) cf; 
    jsection = (jint) section;
    jresult = (jboolean) jenv->CallStaticBooleanMethod(Swig::jclass_playercore_javaJNI, Swig::director_methids[23], jobj, jprop, jcf, jsection);
    if (jenv->ExceptionOccurred()) return c_result;
    c_result = jresult ? true : false; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (jobj) jenv->DeleteLocalRef(jobj);
  return c_result;
}

void SwigDirector_Driver::swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global) {
  static struct {
    const char *mname;
    const char *mdesc;
    jmethodID base_methid;
  } methods[] = {
    {
      "StartThread", "()V", NULL 
    },
    {
      "StopThread", "()V", NULL 
    },
    {
      "Publish", "(Lnet/sourceforge/playerstage/Jplayercore/player_devaddr_t;Lnet/sourceforge/playerstage/Jplayercore/QueuePointer;SSLnet/sourceforge/playerstage/Jplayercore/SWIGTYPE_p_void;JLnet/sourceforge/playerstage/Jplayercore/SWIGTYPE_p_double;Z)V", NULL 
    },
    {
      "Publish", "(Lnet/sourceforge/playerstage/Jplayercore/player_devaddr_t;Lnet/sourceforge/playerstage/Jplayercore/QueuePointer;SSLnet/sourceforge/playerstage/Jplayercore/SWIGTYPE_p_void;JLnet/sourceforge/playerstage/Jplayercore/SWIGTYPE_p_double;)V", NULL 
    },
    {
      "Publish", "(Lnet/sourceforge/playerstage/Jplayercore/player_devaddr_t;Lnet/sourceforge/playerstage/Jplayercore/QueuePointer;SSLnet/sourceforge/playerstage/Jplayercore/SWIGTYPE_p_void;J)V", NULL 
    },
    {
      "Publish", "(Lnet/sourceforge/playerstage/Jplayercore/player_devaddr_t;Lnet/sourceforge/playerstage/Jplayercore/QueuePointer;SSLnet/sourceforge/playerstage/Jplayercore/SWIGTYPE_p_void;)V", NULL 
    },
    {
      "Publish", "(Lnet/sourceforge/playerstage/Jplayercore/player_devaddr_t;Lnet/sourceforge/playerstage/Jplayercore/QueuePointer;SS)V", NULL 
    },
    {
      "Publish", "(Lnet/sourceforge/playerstage/Jplayercore/player_devaddr_t;SSLnet/sourceforge/playerstage/Jplayercore/SWIGTYPE_p_void;JLnet/sourceforge/playerstage/Jplayercore/SWIGTYPE_p_double;Z)V", NULL 
    },
    {
      "Publish", "(Lnet/sourceforge/playerstage/Jplayercore/player_devaddr_t;SSLnet/sourceforge/playerstage/Jplayercore/SWIGTYPE_p_void;JLnet/sourceforge/playerstage/Jplayercore/SWIGTYPE_p_double;)V", NULL 
    },
    {
      "Publish", "(Lnet/sourceforge/playerstage/Jplayercore/player_devaddr_t;SSLnet/sourceforge/playerstage/Jplayercore/SWIGTYPE_p_void;J)V", NULL 
    },
    {
      "Publish", "(Lnet/sourceforge/playerstage/Jplayercore/player_devaddr_t;SSLnet/sourceforge/playerstage/Jplayercore/SWIGTYPE_p_void;)V", NULL 
    },
    {
      "Publish", "(Lnet/sourceforge/playerstage/Jplayercore/player_devaddr_t;SS)V", NULL 
    },
    {
      "Publish", "(Lnet/sourceforge/playerstage/Jplayercore/QueuePointer;Lnet/sourceforge/playerstage/Jplayercore/player_msghdr_t;Lnet/sourceforge/playerstage/Jplayercore/SWIGTYPE_p_void;Z)V", NULL 
    },
    {
      "Publish", "(Lnet/sourceforge/playerstage/Jplayercore/QueuePointer;Lnet/sourceforge/playerstage/Jplayercore/player_msghdr_t;Lnet/sourceforge/playerstage/Jplayercore/SWIGTYPE_p_void;)V", NULL 
    },
    {
      "Publish", "(Lnet/sourceforge/playerstage/Jplayercore/player_msghdr_t;Lnet/sourceforge/playerstage/Jplayercore/SWIGTYPE_p_void;Z)V", NULL 
    },
    {
      "Publish", "(Lnet/sourceforge/playerstage/Jplayercore/player_msghdr_t;Lnet/sourceforge/playerstage/Jplayercore/SWIGTYPE_p_void;)V", NULL 
    },
    {
      "Setup", "()I", NULL 
    },
    {
      "Shutdown", "()I", NULL 
    },
    {
      "Main", "()V", NULL 
    },
    {
      "MainQuit", "()V", NULL 
    },
    {
      "Update", "()V", NULL 
    },
    {
      "ProcessInternalMessages", "(Lnet/sourceforge/playerstage/Jplayercore/QueuePointer;Lnet/sourceforge/playerstage/Jplayercore/player_msghdr_t;Lnet/sourceforge/playerstage/Jplayercore/SWIGTYPE_p_void;)I", NULL 
    },
    {
      "RegisterProperty", "(Ljava/lang/String;Lnet/sourceforge/playerstage/Jplayercore/SWIGTYPE_p_Property;Lnet/sourceforge/playerstage/Jplayercore/ConfigFile;I)Z", NULL 
    },
    {
      "RegisterProperty", "(Lnet/sourceforge/playerstage/Jplayercore/SWIGTYPE_p_Property;Lnet/sourceforge/playerstage/Jplayercore/ConfigFile;I)Z", NULL 
    }
  };
  
  static jclass baseclass = 0 ;
  
  if (swig_set_self(jenv, jself, swig_mem_own, weak_global)) {
    if (!baseclass) {
      baseclass = jenv->FindClass("net/sourceforge/playerstage/Jplayercore/Driver");
      if (!baseclass) return;
      baseclass = (jclass) jenv->NewGlobalRef(baseclass);
    }
    bool derived = (jenv->IsSameObject(baseclass, jcls) ? false : true);
    for (int i = 0; i < 24; ++i) {
      if (!methods[i].base_methid) {
        methods[i].base_methid = jenv->GetMethodID(baseclass, methods[i].mname, methods[i].mdesc);
        if (!methods[i].base_methid) return;
      }
      swig_override[i] = false;
      if (derived) {
        jmethodID methid = jenv->GetMethodID(jcls, methods[i].mname, methods[i].mdesc);
        swig_override[i] = (methid != methods[i].base_methid);
        jenv->ExceptionClear();
      }
    }
  }
}



#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT jint JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_hostname_1to_1packedaddr(JNIEnv *jenv, jclass jcls, jlongArray jarg1, jstring jarg2) {
  jint jresult = 0 ;
  uint32_t *arg1 = (uint32_t *) 0 ;
  char *arg2 = (char *) 0 ;
  int result;
  uint32_t temp1 ;
  
  (void)jenv;
  (void)jcls;
  {
    if (!jarg1) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "array null");
      return 0;
    }
    if (jenv->GetArrayLength(jarg1) == 0) {
      SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "Array must contain at least 1 element");
      return 0;
    }
    arg1 = &temp1; 
  }
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (int)hostname_to_packedaddr(arg1,(char const *)arg2);
  jresult = (jint)result; 
  {
    jlong jvalue = (jlong)temp1;
    jenv->SetLongArrayRegion(jarg1, 0, 1, &jvalue);
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_new_1ConfigFile_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  uint32_t arg1 ;
  uint32_t arg2 ;
  ConfigFile *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (uint32_t)jarg1; 
  arg2 = (uint32_t)jarg2; 
  result = (ConfigFile *)new ConfigFile(arg1,arg2);
  *(ConfigFile **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_new_1ConfigFile_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  uint32_t arg2 ;
  ConfigFile *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = (uint32_t)jarg2; 
  result = (ConfigFile *)new ConfigFile((char const *)arg1,arg2);
  *(ConfigFile **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_new_1ConfigFile_1_1SWIG_12(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ConfigFile *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ConfigFile *)new ConfigFile();
  *(ConfigFile **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_delete_1ConfigFile(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ConfigFile *arg1 = (ConfigFile *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ConfigFile **)&jarg1; 
  delete arg1;
  
}


SWIGEXPORT jboolean JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_ConfigFile_1Load(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ;
  ConfigFile *arg1 = (ConfigFile *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ConfigFile **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (bool)(arg1)->Load((char const *)arg2);
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_ConfigFile_1InsertFieldValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jstring jarg3, jstring jarg4) {
  ConfigFile *arg1 = (ConfigFile *) 0 ;
  int arg2 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ConfigFile **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return ;
  }
  arg4 = 0;
  if (jarg4) {
    arg4 = (char *)jenv->GetStringUTFChars(jarg4, 0);
    if (!arg4) return ;
  }
  (arg1)->InsertFieldValue(arg2,(char const *)arg3,(char const *)arg4);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  if (arg4) jenv->ReleaseStringUTFChars(jarg4, (const char *)arg4);
}


SWIGEXPORT jboolean JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_ConfigFile_1WarnUnused(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ConfigFile *arg1 = (ConfigFile *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ConfigFile **)&jarg1; 
  result = (bool)(arg1)->WarnUnused();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_ConfigFile_1ReadBool(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jstring jarg3, jboolean jarg4) {
  jboolean jresult = 0 ;
  ConfigFile *arg1 = (ConfigFile *) 0 ;
  int arg2 ;
  char *arg3 = (char *) 0 ;
  bool arg4 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ConfigFile **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = jarg4 ? true : false; 
  result = (bool)(arg1)->ReadBool(arg2,(char const *)arg3,arg4);
  jresult = (jboolean)result; 
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_ConfigFile_1ReadString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jstring jarg3, jstring jarg4) {
  jstring jresult = 0 ;
  ConfigFile *arg1 = (ConfigFile *) 0 ;
  int arg2 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ConfigFile **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = 0;
  if (jarg4) {
    arg4 = (char *)jenv->GetStringUTFChars(jarg4, 0);
    if (!arg4) return 0;
  }
  result = (char *)(arg1)->ReadString(arg2,(char const *)arg3,(char const *)arg4);
  if(result) jresult = jenv->NewStringUTF((const char *)result);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  if (arg4) jenv->ReleaseStringUTFChars(jarg4, (const char *)arg4);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_ConfigFile_1ReadInt(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jstring jarg3, jint jarg4) {
  jint jresult = 0 ;
  ConfigFile *arg1 = (ConfigFile *) 0 ;
  int arg2 ;
  char *arg3 = (char *) 0 ;
  int arg4 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ConfigFile **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = (int)jarg4; 
  result = (int)(arg1)->ReadInt(arg2,(char const *)arg3,arg4);
  jresult = (jint)result; 
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_ConfigFile_1ReadFloat(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jstring jarg3, jdouble jarg4) {
  jdouble jresult = 0 ;
  ConfigFile *arg1 = (ConfigFile *) 0 ;
  int arg2 ;
  char *arg3 = (char *) 0 ;
  double arg4 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ConfigFile **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = (double)jarg4; 
  result = (double)(arg1)->ReadFloat(arg2,(char const *)arg3,arg4);
  jresult = (jdouble)result; 
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_ConfigFile_1ReadLength(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jstring jarg3, jdouble jarg4) {
  jdouble jresult = 0 ;
  ConfigFile *arg1 = (ConfigFile *) 0 ;
  int arg2 ;
  char *arg3 = (char *) 0 ;
  double arg4 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ConfigFile **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = (double)jarg4; 
  result = (double)(arg1)->ReadLength(arg2,(char const *)arg3,arg4);
  jresult = (jdouble)result; 
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_ConfigFile_1ReadAngle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jstring jarg3, jdouble jarg4) {
  jdouble jresult = 0 ;
  ConfigFile *arg1 = (ConfigFile *) 0 ;
  int arg2 ;
  char *arg3 = (char *) 0 ;
  double arg4 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ConfigFile **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = (double)jarg4; 
  result = (double)(arg1)->ReadAngle(arg2,(char const *)arg3,arg4);
  jresult = (jdouble)result; 
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_ConfigFile_1ReadColor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jstring jarg3, jlong jarg4) {
  jlong jresult = 0 ;
  ConfigFile *arg1 = (ConfigFile *) 0 ;
  int arg2 ;
  char *arg3 = (char *) 0 ;
  uint32_t arg4 ;
  uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ConfigFile **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = (uint32_t)jarg4; 
  result = (uint32_t)(arg1)->ReadColor(arg2,(char const *)arg3,arg4);
  jresult = (jlong)result; 
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_ConfigFile_1ReadFilename(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jstring jarg3, jstring jarg4) {
  jstring jresult = 0 ;
  ConfigFile *arg1 = (ConfigFile *) 0 ;
  int arg2 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ConfigFile **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = 0;
  if (jarg4) {
    arg4 = (char *)jenv->GetStringUTFChars(jarg4, 0);
    if (!arg4) return 0;
  }
  result = (char *)(arg1)->ReadFilename(arg2,(char const *)arg3,(char const *)arg4);
  if(result) jresult = jenv->NewStringUTF((const char *)result);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  if (arg4) jenv->ReleaseStringUTFChars(jarg4, (const char *)arg4);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_ConfigFile_1GetTupleCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jstring jarg3) {
  jint jresult = 0 ;
  ConfigFile *arg1 = (ConfigFile *) 0 ;
  int arg2 ;
  char *arg3 = (char *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ConfigFile **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  result = (int)(arg1)->GetTupleCount(arg2,(char const *)arg3);
  jresult = (jint)result; 
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_ConfigFile_1ReadTupleString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jstring jarg3, jint jarg4, jstring jarg5) {
  jstring jresult = 0 ;
  ConfigFile *arg1 = (ConfigFile *) 0 ;
  int arg2 ;
  char *arg3 = (char *) 0 ;
  int arg4 ;
  char *arg5 = (char *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ConfigFile **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = (int)jarg4; 
  arg5 = 0;
  if (jarg5) {
    arg5 = (char *)jenv->GetStringUTFChars(jarg5, 0);
    if (!arg5) return 0;
  }
  result = (char *)(arg1)->ReadTupleString(arg2,(char const *)arg3,arg4,(char const *)arg5);
  if(result) jresult = jenv->NewStringUTF((const char *)result);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  if (arg5) jenv->ReleaseStringUTFChars(jarg5, (const char *)arg5);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_ConfigFile_1ReadTupleInt(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jstring jarg3, jint jarg4, jint jarg5) {
  jint jresult = 0 ;
  ConfigFile *arg1 = (ConfigFile *) 0 ;
  int arg2 ;
  char *arg3 = (char *) 0 ;
  int arg4 ;
  int arg5 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ConfigFile **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  result = (int)(arg1)->ReadTupleInt(arg2,(char const *)arg3,arg4,arg5);
  jresult = (jint)result; 
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_ConfigFile_1ReadTupleFloat(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jstring jarg3, jint jarg4, jdouble jarg5) {
  jdouble jresult = 0 ;
  ConfigFile *arg1 = (ConfigFile *) 0 ;
  int arg2 ;
  char *arg3 = (char *) 0 ;
  int arg4 ;
  double arg5 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ConfigFile **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = (int)jarg4; 
  arg5 = (double)jarg5; 
  result = (double)(arg1)->ReadTupleFloat(arg2,(char const *)arg3,arg4,arg5);
  jresult = (jdouble)result; 
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_ConfigFile_1ReadTupleLength(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jstring jarg3, jint jarg4, jdouble jarg5) {
  jdouble jresult = 0 ;
  ConfigFile *arg1 = (ConfigFile *) 0 ;
  int arg2 ;
  char *arg3 = (char *) 0 ;
  int arg4 ;
  double arg5 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ConfigFile **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = (int)jarg4; 
  arg5 = (double)jarg5; 
  result = (double)(arg1)->ReadTupleLength(arg2,(char const *)arg3,arg4,arg5);
  jresult = (jdouble)result; 
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_ConfigFile_1ReadTupleAngle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jstring jarg3, jint jarg4, jdouble jarg5) {
  jdouble jresult = 0 ;
  ConfigFile *arg1 = (ConfigFile *) 0 ;
  int arg2 ;
  char *arg3 = (char *) 0 ;
  int arg4 ;
  double arg5 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ConfigFile **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = (int)jarg4; 
  arg5 = (double)jarg5; 
  result = (double)(arg1)->ReadTupleAngle(arg2,(char const *)arg3,arg4,arg5);
  jresult = (jdouble)result; 
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_ConfigFile_1ReadTupleColor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jstring jarg3, jint jarg4, jlong jarg5) {
  jlong jresult = 0 ;
  ConfigFile *arg1 = (ConfigFile *) 0 ;
  int arg2 ;
  char *arg3 = (char *) 0 ;
  int arg4 ;
  uint32_t arg5 ;
  uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ConfigFile **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = (int)jarg4; 
  arg5 = (uint32_t)jarg5; 
  result = (uint32_t)(arg1)->ReadTupleColor(arg2,(char const *)arg3,arg4,arg5);
  jresult = (jlong)result; 
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_ConfigFile_1ReadDeviceAddr(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3, jstring jarg4, jint jarg5, jint jarg6, jstring jarg7) {
  jint jresult = 0 ;
  ConfigFile *arg1 = (ConfigFile *) 0 ;
  player_devaddr_t *arg2 = (player_devaddr_t *) 0 ;
  int arg3 ;
  char *arg4 = (char *) 0 ;
  int arg5 ;
  int arg6 ;
  char *arg7 = (char *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ConfigFile **)&jarg1; 
  arg2 = *(player_devaddr_t **)&jarg2; 
  arg3 = (int)jarg3; 
  arg4 = 0;
  if (jarg4) {
    arg4 = (char *)jenv->GetStringUTFChars(jarg4, 0);
    if (!arg4) return 0;
  }
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  arg7 = 0;
  if (jarg7) {
    arg7 = (char *)jenv->GetStringUTFChars(jarg7, 0);
    if (!arg7) return 0;
  }
  result = (int)(arg1)->ReadDeviceAddr(arg2,arg3,(char const *)arg4,arg5,arg6,(char const *)arg7);
  jresult = (jint)result; 
  if (arg4) jenv->ReleaseStringUTFChars(jarg4, (const char *)arg4);
  if (arg7) jenv->ReleaseStringUTFChars(jarg7, (const char *)arg7);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_ConfigFile_1ParseDriver(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  ConfigFile *arg1 = (ConfigFile *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ConfigFile **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->ParseDriver(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_ConfigFile_1ParseInterface(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  ConfigFile *arg1 = (ConfigFile *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ConfigFile **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->ParseInterface(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_ConfigFile_1ParseAllDrivers(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ConfigFile *arg1 = (ConfigFile *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ConfigFile **)&jarg1; 
  result = (bool)(arg1)->ParseAllDrivers();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_ConfigFile_1ParseAllInterfaces(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ConfigFile *arg1 = (ConfigFile *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ConfigFile **)&jarg1; 
  result = (bool)(arg1)->ParseAllInterfaces();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_ConfigFile_1GetSectionCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ConfigFile *arg1 = (ConfigFile *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ConfigFile **)&jarg1; 
  result = (int)(arg1)->GetSectionCount();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_ConfigFile_1GetSectionType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jstring jresult = 0 ;
  ConfigFile *arg1 = (ConfigFile *) 0 ;
  int arg2 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ConfigFile **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (char *)(arg1)->GetSectionType(arg2);
  if(result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_ConfigFile_1LookupSection(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  ConfigFile *arg1 = (ConfigFile *) 0 ;
  char *arg2 = (char *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ConfigFile **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (int)(arg1)->LookupSection((char const *)arg2);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_ConfigFile_1GetSectionParent(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  ConfigFile *arg1 = (ConfigFile *) 0 ;
  int arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ConfigFile **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (int)(arg1)->GetSectionParent(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_ConfigFile_1DumpTokens(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ConfigFile *arg1 = (ConfigFile *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ConfigFile **)&jarg1; 
  (arg1)->DumpTokens();
}


SWIGEXPORT void JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_ConfigFile_1DumpSections(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ConfigFile *arg1 = (ConfigFile *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ConfigFile **)&jarg1; 
  (arg1)->DumpSections();
}


SWIGEXPORT void JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_ConfigFile_1DumpFields(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ConfigFile *arg1 = (ConfigFile *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ConfigFile **)&jarg1; 
  (arg1)->DumpFields();
}


SWIGEXPORT void JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_ConfigFile_1filename_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  ConfigFile *arg1 = (ConfigFile *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ConfigFile **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if (arg1->filename) delete [] arg1->filename;
    if (arg2) {
      arg1->filename = (char *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->filename, (const char *)arg2);
    } else {
      arg1->filename = 0;
    }
  }
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_ConfigFile_1filename_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  ConfigFile *arg1 = (ConfigFile *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ConfigFile **)&jarg1; 
  result = (char *) ((arg1)->filename);
  if(result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_LOCALHOST_1ADDR_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int) 16777343;
  
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_new_1Device(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  player_devaddr_t arg1 ;
  Driver *arg2 = (Driver *) 0 ;
  Device *result = 0 ;
  player_devaddr_t *argp1 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  argp1 = *(player_devaddr_t **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null player_devaddr_t");
    return 0;
  }
  arg1 = *argp1; 
  arg2 = *(Driver **)&jarg2; 
  result = (Device *)new Device(arg1,arg2);
  *(Device **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_delete_1Device(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Device *arg1 = (Device *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Device **)&jarg1; 
  delete arg1;
  
}


SWIGEXPORT jint JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_Device_1Subscribe(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  Device *arg1 = (Device *) 0 ;
  QueuePointer *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Device **)&jarg1; 
  arg2 = *(QueuePointer **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "QueuePointer & reference is null");
    return 0;
  } 
  result = (int)(arg1)->Subscribe(*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_Device_1Unsubscribe(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  Device *arg1 = (Device *) 0 ;
  QueuePointer *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Device **)&jarg1; 
  arg2 = *(QueuePointer **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "QueuePointer & reference is null");
    return 0;
  } 
  result = (int)(arg1)->Unsubscribe(*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_Device_1PutMsg_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jshort jarg3, jshort jarg4, jlong jarg5, jlong jarg6, jlong jarg7) {
  Device *arg1 = (Device *) 0 ;
  QueuePointer *arg2 = 0 ;
  uint8_t arg3 ;
  uint8_t arg4 ;
  void *arg5 = (void *) 0 ;
  size_t arg6 ;
  double *arg7 = (double *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Device **)&jarg1; 
  arg2 = *(QueuePointer **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "QueuePointer & reference is null");
    return ;
  } 
  arg3 = (uint8_t)jarg3; 
  arg4 = (uint8_t)jarg4; 
  arg5 = *(void **)&jarg5; 
  arg6 = (size_t)jarg6; 
  arg7 = *(double **)&jarg7; 
  (arg1)->PutMsg(*arg2,arg3,arg4,arg5,arg6,arg7);
}


SWIGEXPORT void JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_Device_1PutMsg_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jboolean jarg5) {
  Device *arg1 = (Device *) 0 ;
  QueuePointer *arg2 = 0 ;
  player_msghdr_t *arg3 = (player_msghdr_t *) 0 ;
  void *arg4 = (void *) 0 ;
  bool arg5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(Device **)&jarg1; 
  arg2 = *(QueuePointer **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "QueuePointer & reference is null");
    return ;
  } 
  arg3 = *(player_msghdr_t **)&jarg3; 
  arg4 = *(void **)&jarg4; 
  arg5 = jarg5 ? true : false; 
  (arg1)->PutMsg(*arg2,arg3,arg4,arg5);
}


SWIGEXPORT void JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_Device_1PutMsg_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4) {
  Device *arg1 = (Device *) 0 ;
  QueuePointer *arg2 = 0 ;
  player_msghdr_t *arg3 = (player_msghdr_t *) 0 ;
  void *arg4 = (void *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(Device **)&jarg1; 
  arg2 = *(QueuePointer **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "QueuePointer & reference is null");
    return ;
  } 
  arg3 = *(player_msghdr_t **)&jarg3; 
  arg4 = *(void **)&jarg4; 
  (arg1)->PutMsg(*arg2,arg3,arg4);
}


SWIGEXPORT jlong JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_Device_1Request_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jshort jarg3, jshort jarg4, jlong jarg5, jlong jarg6, jlong jarg7, jboolean jarg8) {
  jlong jresult = 0 ;
  Device *arg1 = (Device *) 0 ;
  QueuePointer *arg2 = 0 ;
  uint8_t arg3 ;
  uint8_t arg4 ;
  void *arg5 = (void *) 0 ;
  size_t arg6 ;
  double *arg7 = (double *) 0 ;
  bool arg8 ;
  Message *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Device **)&jarg1; 
  arg2 = *(QueuePointer **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "QueuePointer & reference is null");
    return 0;
  } 
  arg3 = (uint8_t)jarg3; 
  arg4 = (uint8_t)jarg4; 
  arg5 = *(void **)&jarg5; 
  arg6 = (size_t)jarg6; 
  arg7 = *(double **)&jarg7; 
  arg8 = jarg8 ? true : false; 
  result = (Message *)(arg1)->Request(*arg2,arg3,arg4,arg5,arg6,arg7,arg8);
  *(Message **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_Device_1Request_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jshort jarg3, jshort jarg4, jlong jarg5, jlong jarg6, jlong jarg7) {
  jlong jresult = 0 ;
  Device *arg1 = (Device *) 0 ;
  QueuePointer *arg2 = 0 ;
  uint8_t arg3 ;
  uint8_t arg4 ;
  void *arg5 = (void *) 0 ;
  size_t arg6 ;
  double *arg7 = (double *) 0 ;
  Message *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Device **)&jarg1; 
  arg2 = *(QueuePointer **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "QueuePointer & reference is null");
    return 0;
  } 
  arg3 = (uint8_t)jarg3; 
  arg4 = (uint8_t)jarg4; 
  arg5 = *(void **)&jarg5; 
  arg6 = (size_t)jarg6; 
  arg7 = *(double **)&jarg7; 
  result = (Message *)(arg1)->Request(*arg2,arg3,arg4,arg5,arg6,arg7);
  *(Message **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_Device_1MatchDeviceAddress(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  player_devaddr_t arg1 ;
  player_devaddr_t arg2 ;
  bool result;
  player_devaddr_t *argp1 ;
  player_devaddr_t *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  argp1 = *(player_devaddr_t **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null player_devaddr_t");
    return 0;
  }
  arg1 = *argp1; 
  argp2 = *(player_devaddr_t **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null player_devaddr_t");
    return 0;
  }
  arg2 = *argp2; 
  result = (bool)Device::MatchDeviceAddress(arg1,arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_Device_1next_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Device *arg1 = (Device *) 0 ;
  Device *arg2 = (Device *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Device **)&jarg1; 
  arg2 = *(Device **)&jarg2; 
  if (arg1) (arg1)->next = arg2;
  
}


SWIGEXPORT jlong JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_Device_1next_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Device *arg1 = (Device *) 0 ;
  Device *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Device **)&jarg1; 
  result = (Device *) ((arg1)->next);
  *(Device **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_Device_1addr_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Device *arg1 = (Device *) 0 ;
  player_devaddr_t *arg2 = (player_devaddr_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Device **)&jarg1; 
  arg2 = *(player_devaddr_t **)&jarg2; 
  if (arg1) (arg1)->addr = *arg2;
  
}


SWIGEXPORT jlong JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_Device_1addr_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Device *arg1 = (Device *) 0 ;
  player_devaddr_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Device **)&jarg1; 
  result = (player_devaddr_t *)& ((arg1)->addr);
  *(player_devaddr_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_Device_1drivername_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  Device *arg1 = (Device *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Device **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if (arg2) strncpy((char *)arg1->drivername, (const char *)arg2, PLAYER_MAX_DRIVER_STRING_LEN);
    else arg1->drivername[0] = 0;
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_Device_1drivername_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  Device *arg1 = (Device *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Device **)&jarg1; 
  result = (char *)(char *) ((arg1)->drivername);
  if(result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_Device_1driver_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Device *arg1 = (Device *) 0 ;
  Driver *arg2 = (Driver *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Device **)&jarg1; 
  arg2 = *(Driver **)&jarg2; 
  if (arg1) (arg1)->driver = arg2;
  
}


SWIGEXPORT jlong JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_Device_1driver_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Device *arg1 = (Device *) 0 ;
  Driver *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Device **)&jarg1; 
  result = (Driver *) ((arg1)->driver);
  *(Driver **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_Device_1InQueue_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Device *arg1 = (Device *) 0 ;
  QueuePointer *arg2 = (QueuePointer *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Device **)&jarg1; 
  arg2 = *(QueuePointer **)&jarg2; 
  if (arg1) (arg1)->InQueue = *arg2;
  
}


SWIGEXPORT jlong JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_Device_1InQueue_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Device *arg1 = (Device *) 0 ;
  QueuePointer *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Device **)&jarg1; 
  result = (QueuePointer *)& ((arg1)->InQueue);
  *(QueuePointer **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_Device_1queues_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Device *arg1 = (Device *) 0 ;
  QueuePointer *arg2 = (QueuePointer *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Device **)&jarg1; 
  arg2 = *(QueuePointer **)&jarg2; 
  if (arg1) (arg1)->queues = arg2;
  
}


SWIGEXPORT jlong JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_Device_1queues_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Device *arg1 = (Device *) 0 ;
  QueuePointer *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Device **)&jarg1; 
  result = (QueuePointer *) ((arg1)->queues);
  *(QueuePointer **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_Device_1len_1queues_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  Device *arg1 = (Device *) 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Device **)&jarg1; 
  arg2 = (size_t)jarg2; 
  if (arg1) (arg1)->len_queues = arg2;
  
}


SWIGEXPORT jlong JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_Device_1len_1queues_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Device *arg1 = (Device *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Device **)&jarg1; 
  result =  ((arg1)->len_queues);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_new_1DeviceTable(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  DeviceTable *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (DeviceTable *)new DeviceTable();
  *(DeviceTable **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_delete_1DeviceTable(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  DeviceTable *arg1 = (DeviceTable *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(DeviceTable **)&jarg1; 
  delete arg1;
  
}


SWIGEXPORT jlong JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_DeviceTable_1AddDevice_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jboolean jarg4) {
  jlong jresult = 0 ;
  DeviceTable *arg1 = (DeviceTable *) 0 ;
  player_devaddr_t arg2 ;
  Driver *arg3 = (Driver *) 0 ;
  bool arg4 ;
  Device *result = 0 ;
  player_devaddr_t *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(DeviceTable **)&jarg1; 
  argp2 = *(player_devaddr_t **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null player_devaddr_t");
    return 0;
  }
  arg2 = *argp2; 
  arg3 = *(Driver **)&jarg3; 
  arg4 = jarg4 ? true : false; 
  result = (Device *)(arg1)->AddDevice(arg2,arg3,arg4);
  *(Device **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_DeviceTable_1AddDevice_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  DeviceTable *arg1 = (DeviceTable *) 0 ;
  player_devaddr_t arg2 ;
  Driver *arg3 = (Driver *) 0 ;
  Device *result = 0 ;
  player_devaddr_t *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(DeviceTable **)&jarg1; 
  argp2 = *(player_devaddr_t **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null player_devaddr_t");
    return 0;
  }
  arg2 = *argp2; 
  arg3 = *(Driver **)&jarg3; 
  result = (Device *)(arg1)->AddDevice(arg2,arg3);
  *(Device **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_DeviceTable_1GetDevice_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jboolean jarg3) {
  jlong jresult = 0 ;
  DeviceTable *arg1 = (DeviceTable *) 0 ;
  player_devaddr_t arg2 ;
  bool arg3 ;
  Device *result = 0 ;
  player_devaddr_t *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(DeviceTable **)&jarg1; 
  argp2 = *(player_devaddr_t **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null player_devaddr_t");
    return 0;
  }
  arg2 = *argp2; 
  arg3 = jarg3 ? true : false; 
  result = (Device *)(arg1)->GetDevice(arg2,arg3);
  *(Device **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_DeviceTable_1GetDevice_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  DeviceTable *arg1 = (DeviceTable *) 0 ;
  player_devaddr_t arg2 ;
  Device *result = 0 ;
  player_devaddr_t *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(DeviceTable **)&jarg1; 
  argp2 = *(player_devaddr_t **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null player_devaddr_t");
    return 0;
  }
  arg2 = *argp2; 
  result = (Device *)(arg1)->GetDevice(arg2);
  *(Device **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_DeviceTable_1GetDevice_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jboolean jarg3) {
  jlong jresult = 0 ;
  DeviceTable *arg1 = (DeviceTable *) 0 ;
  char *arg2 = (char *) 0 ;
  bool arg3 ;
  Device *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DeviceTable **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = jarg3 ? true : false; 
  result = (Device *)(arg1)->GetDevice((char const *)arg2,arg3);
  *(Device **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_DeviceTable_1GetDevice_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  DeviceTable *arg1 = (DeviceTable *) 0 ;
  char *arg2 = (char *) 0 ;
  Device *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DeviceTable **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (Device *)(arg1)->GetDevice((char const *)arg2);
  *(Device **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_DeviceTable_1GetFirstDevice(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  DeviceTable *arg1 = (DeviceTable *) 0 ;
  Device *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DeviceTable **)&jarg1; 
  result = (Device *)(arg1)->GetFirstDevice();
  *(Device **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_DeviceTable_1GetNextDevice(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  DeviceTable *arg1 = (DeviceTable *) 0 ;
  Device *arg2 = (Device *) 0 ;
  Device *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(DeviceTable **)&jarg1; 
  arg2 = *(Device **)&jarg2; 
  result = (Device *)(arg1)->GetNextDevice(arg2);
  *(Device **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_DeviceTable_1Size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  DeviceTable *arg1 = (DeviceTable *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DeviceTable **)&jarg1; 
  result = (int)(arg1)->Size();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_DeviceTable_1UpdateDevices(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  DeviceTable *arg1 = (DeviceTable *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DeviceTable **)&jarg1; 
  (arg1)->UpdateDevices();
}


SWIGEXPORT jint JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_DeviceTable_1StartAlwaysonDrivers(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  DeviceTable *arg1 = (DeviceTable *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DeviceTable **)&jarg1; 
  result = (int)(arg1)->StartAlwaysonDrivers();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_DeviceTable_1AddRemoteDriverFn(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  DeviceTable *arg1 = (DeviceTable *) 0 ;
  remote_driver_fn_t arg2 = (remote_driver_fn_t) 0 ;
  void *arg3 = (void *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DeviceTable **)&jarg1; 
  arg2 = *(remote_driver_fn_t *)&jarg2; 
  arg3 = *(void **)&jarg3; 
  (arg1)->AddRemoteDriverFn(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_Driver_1StartThread(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  Driver *arg1 = (Driver *) 0 ;
  SwigDirector_Driver *darg = 0;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Driver **)&jarg1; 
  darg = dynamic_cast<SwigDirector_Driver *>(arg1);
  (darg)->StartThread();
}


SWIGEXPORT void JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_Driver_1StartThreadSwigExplicitDriver(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  Driver *arg1 = (Driver *) 0 ;
  SwigDirector_Driver *darg = 0;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Driver **)&jarg1; 
  darg = dynamic_cast<SwigDirector_Driver *>(arg1);
  (darg)->StartThreadSwigPublic();
}


SWIGEXPORT void JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_Driver_1StopThread(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  Driver *arg1 = (Driver *) 0 ;
  SwigDirector_Driver *darg = 0;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Driver **)&jarg1; 
  darg = dynamic_cast<SwigDirector_Driver *>(arg1);
  (darg)->StopThread();
}


SWIGEXPORT void JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_Driver_1StopThreadSwigExplicitDriver(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  Driver *arg1 = (Driver *) 0 ;
  SwigDirector_Driver *darg = 0;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Driver **)&jarg1; 
  darg = dynamic_cast<SwigDirector_Driver *>(arg1);
  (darg)->StopThreadSwigPublic();
}


SWIGEXPORT void JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_Driver_1driverthread_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  Driver *arg1 = (Driver *) 0 ;
  pthread_t arg2 ;
  pthread_t *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Driver **)&jarg1; 
  argp2 = *(pthread_t **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null pthread_t");
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->driverthread = arg2;
  
}


SWIGEXPORT jlong JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_Driver_1driverthread_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Driver *arg1 = (Driver *) 0 ;
  pthread_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Driver **)&jarg1; 
  result =  ((arg1)->driverthread);
  *(pthread_t **)&jresult = new pthread_t((pthread_t &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_Driver_1Lock(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  Driver *arg1 = (Driver *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Driver **)&jarg1; 
  (arg1)->Lock();
}


SWIGEXPORT void JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_Driver_1Unlock(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  Driver *arg1 = (Driver *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Driver **)&jarg1; 
  (arg1)->Unlock();
}


SWIGEXPORT void JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_Driver_1ret_1queue_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Driver *arg1 = (Driver *) 0 ;
  QueuePointer *arg2 = (QueuePointer *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Driver **)&jarg1; 
  arg2 = *(QueuePointer **)&jarg2; 
  if (arg1) (arg1)->ret_queue = *arg2;
  
}


SWIGEXPORT jlong JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_Driver_1ret_1queue_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Driver *arg1 = (Driver *) 0 ;
  QueuePointer *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Driver **)&jarg1; 
  result = (QueuePointer *)& ((arg1)->ret_queue);
  *(QueuePointer **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_Driver_1Publish_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jshort jarg4, jshort jarg5, jlong jarg6, jlong jarg7, jlong jarg8, jboolean jarg9) {
  Driver *arg1 = (Driver *) 0 ;
  player_devaddr_t arg2 ;
  QueuePointer *arg3 = 0 ;
  uint8_t arg4 ;
  uint8_t arg5 ;
  void *arg6 = (void *) 0 ;
  size_t arg7 ;
  double *arg8 = (double *) 0 ;
  bool arg9 ;
  player_devaddr_t *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(Driver **)&jarg1; 
  argp2 = *(player_devaddr_t **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null player_devaddr_t");
    return ;
  }
  arg2 = *argp2; 
  arg3 = *(QueuePointer **)&jarg3;
  if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "QueuePointer & reference is null");
    return ;
  } 
  arg4 = (uint8_t)jarg4; 
  arg5 = (uint8_t)jarg5; 
  arg6 = *(void **)&jarg6; 
  arg7 = (size_t)jarg7; 
  arg8 = *(double **)&jarg8; 
  arg9 = jarg9 ? true : false; 
  (arg1)->Publish(arg2,*arg3,arg4,arg5,arg6,arg7,arg8,arg9);
}


SWIGEXPORT void JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_Driver_1PublishSwigExplicitDriver_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jshort jarg4, jshort jarg5, jlong jarg6, jlong jarg7, jlong jarg8, jboolean jarg9) {
  Driver *arg1 = (Driver *) 0 ;
  player_devaddr_t arg2 ;
  QueuePointer *arg3 = 0 ;
  uint8_t arg4 ;
  uint8_t arg5 ;
  void *arg6 = (void *) 0 ;
  size_t arg7 ;
  double *arg8 = (double *) 0 ;
  bool arg9 ;
  player_devaddr_t *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(Driver **)&jarg1; 
  argp2 = *(player_devaddr_t **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null player_devaddr_t");
    return ;
  }
  arg2 = *argp2; 
  arg3 = *(QueuePointer **)&jarg3;
  if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "QueuePointer & reference is null");
    return ;
  } 
  arg4 = (uint8_t)jarg4; 
  arg5 = (uint8_t)jarg5; 
  arg6 = *(void **)&jarg6; 
  arg7 = (size_t)jarg7; 
  arg8 = *(double **)&jarg8; 
  arg9 = jarg9 ? true : false; 
  (arg1)->Driver::Publish(arg2,*arg3,arg4,arg5,arg6,arg7,arg8,arg9);
}


SWIGEXPORT void JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_Driver_1Publish_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jshort jarg4, jshort jarg5, jlong jarg6, jlong jarg7, jlong jarg8) {
  Driver *arg1 = (Driver *) 0 ;
  player_devaddr_t arg2 ;
  QueuePointer *arg3 = 0 ;
  uint8_t arg4 ;
  uint8_t arg5 ;
  void *arg6 = (void *) 0 ;
  size_t arg7 ;
  double *arg8 = (double *) 0 ;
  player_devaddr_t *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(Driver **)&jarg1; 
  argp2 = *(player_devaddr_t **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null player_devaddr_t");
    return ;
  }
  arg2 = *argp2; 
  arg3 = *(QueuePointer **)&jarg3;
  if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "QueuePointer & reference is null");
    return ;
  } 
  arg4 = (uint8_t)jarg4; 
  arg5 = (uint8_t)jarg5; 
  arg6 = *(void **)&jarg6; 
  arg7 = (size_t)jarg7; 
  arg8 = *(double **)&jarg8; 
  (arg1)->Publish(arg2,*arg3,arg4,arg5,arg6,arg7,arg8);
}


SWIGEXPORT void JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_Driver_1PublishSwigExplicitDriver_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jshort jarg4, jshort jarg5, jlong jarg6, jlong jarg7, jlong jarg8) {
  Driver *arg1 = (Driver *) 0 ;
  player_devaddr_t arg2 ;
  QueuePointer *arg3 = 0 ;
  uint8_t arg4 ;
  uint8_t arg5 ;
  void *arg6 = (void *) 0 ;
  size_t arg7 ;
  double *arg8 = (double *) 0 ;
  player_devaddr_t *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(Driver **)&jarg1; 
  argp2 = *(player_devaddr_t **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null player_devaddr_t");
    return ;
  }
  arg2 = *argp2; 
  arg3 = *(QueuePointer **)&jarg3;
  if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "QueuePointer & reference is null");
    return ;
  } 
  arg4 = (uint8_t)jarg4; 
  arg5 = (uint8_t)jarg5; 
  arg6 = *(void **)&jarg6; 
  arg7 = (size_t)jarg7; 
  arg8 = *(double **)&jarg8; 
  (arg1)->Driver::Publish(arg2,*arg3,arg4,arg5,arg6,arg7,arg8);
}


SWIGEXPORT void JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_Driver_1Publish_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jshort jarg4, jshort jarg5, jlong jarg6, jlong jarg7) {
  Driver *arg1 = (Driver *) 0 ;
  player_devaddr_t arg2 ;
  QueuePointer *arg3 = 0 ;
  uint8_t arg4 ;
  uint8_t arg5 ;
  void *arg6 = (void *) 0 ;
  size_t arg7 ;
  player_devaddr_t *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(Driver **)&jarg1; 
  argp2 = *(player_devaddr_t **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null player_devaddr_t");
    return ;
  }
  arg2 = *argp2; 
  arg3 = *(QueuePointer **)&jarg3;
  if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "QueuePointer & reference is null");
    return ;
  } 
  arg4 = (uint8_t)jarg4; 
  arg5 = (uint8_t)jarg5; 
  arg6 = *(void **)&jarg6; 
  arg7 = (size_t)jarg7; 
  (arg1)->Publish(arg2,*arg3,arg4,arg5,arg6,arg7);
}


SWIGEXPORT void JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_Driver_1PublishSwigExplicitDriver_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jshort jarg4, jshort jarg5, jlong jarg6, jlong jarg7) {
  Driver *arg1 = (Driver *) 0 ;
  player_devaddr_t arg2 ;
  QueuePointer *arg3 = 0 ;
  uint8_t arg4 ;
  uint8_t arg5 ;
  void *arg6 = (void *) 0 ;
  size_t arg7 ;
  player_devaddr_t *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(Driver **)&jarg1; 
  argp2 = *(player_devaddr_t **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null player_devaddr_t");
    return ;
  }
  arg2 = *argp2; 
  arg3 = *(QueuePointer **)&jarg3;
  if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "QueuePointer & reference is null");
    return ;
  } 
  arg4 = (uint8_t)jarg4; 
  arg5 = (uint8_t)jarg5; 
  arg6 = *(void **)&jarg6; 
  arg7 = (size_t)jarg7; 
  (arg1)->Driver::Publish(arg2,*arg3,arg4,arg5,arg6,arg7);
}


SWIGEXPORT void JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_Driver_1Publish_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jshort jarg4, jshort jarg5, jlong jarg6) {
  Driver *arg1 = (Driver *) 0 ;
  player_devaddr_t arg2 ;
  QueuePointer *arg3 = 0 ;
  uint8_t arg4 ;
  uint8_t arg5 ;
  void *arg6 = (void *) 0 ;
  player_devaddr_t *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(Driver **)&jarg1; 
  argp2 = *(player_devaddr_t **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null player_devaddr_t");
    return ;
  }
  arg2 = *argp2; 
  arg3 = *(QueuePointer **)&jarg3;
  if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "QueuePointer & reference is null");
    return ;
  } 
  arg4 = (uint8_t)jarg4; 
  arg5 = (uint8_t)jarg5; 
  arg6 = *(void **)&jarg6; 
  (arg1)->Publish(arg2,*arg3,arg4,arg5,arg6);
}


SWIGEXPORT void JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_Driver_1PublishSwigExplicitDriver_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jshort jarg4, jshort jarg5, jlong jarg6) {
  Driver *arg1 = (Driver *) 0 ;
  player_devaddr_t arg2 ;
  QueuePointer *arg3 = 0 ;
  uint8_t arg4 ;
  uint8_t arg5 ;
  void *arg6 = (void *) 0 ;
  player_devaddr_t *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(Driver **)&jarg1; 
  argp2 = *(player_devaddr_t **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null player_devaddr_t");
    return ;
  }
  arg2 = *argp2; 
  arg3 = *(QueuePointer **)&jarg3;
  if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "QueuePointer & reference is null");
    return ;
  } 
  arg4 = (uint8_t)jarg4; 
  arg5 = (uint8_t)jarg5; 
  arg6 = *(void **)&jarg6; 
  (arg1)->Driver::Publish(arg2,*arg3,arg4,arg5,arg6);
}


SWIGEXPORT void JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_Driver_1Publish_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jshort jarg4, jshort jarg5) {
  Driver *arg1 = (Driver *) 0 ;
  player_devaddr_t arg2 ;
  QueuePointer *arg3 = 0 ;
  uint8_t arg4 ;
  uint8_t arg5 ;
  player_devaddr_t *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(Driver **)&jarg1; 
  argp2 = *(player_devaddr_t **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null player_devaddr_t");
    return ;
  }
  arg2 = *argp2; 
  arg3 = *(QueuePointer **)&jarg3;
  if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "QueuePointer & reference is null");
    return ;
  } 
  arg4 = (uint8_t)jarg4; 
  arg5 = (uint8_t)jarg5; 
  (arg1)->Publish(arg2,*arg3,arg4,arg5);
}


SWIGEXPORT void JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_Driver_1PublishSwigExplicitDriver_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jshort jarg4, jshort jarg5) {
  Driver *arg1 = (Driver *) 0 ;
  player_devaddr_t arg2 ;
  QueuePointer *arg3 = 0 ;
  uint8_t arg4 ;
  uint8_t arg5 ;
  player_devaddr_t *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(Driver **)&jarg1; 
  argp2 = *(player_devaddr_t **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null player_devaddr_t");
    return ;
  }
  arg2 = *argp2; 
  arg3 = *(QueuePointer **)&jarg3;
  if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "QueuePointer & reference is null");
    return ;
  } 
  arg4 = (uint8_t)jarg4; 
  arg5 = (uint8_t)jarg5; 
  (arg1)->Driver::Publish(arg2,*arg3,arg4,arg5);
}


SWIGEXPORT void JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_Driver_1Publish_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jshort jarg3, jshort jarg4, jlong jarg5, jlong jarg6, jlong jarg7, jboolean jarg8) {
  Driver *arg1 = (Driver *) 0 ;
  player_devaddr_t arg2 ;
  uint8_t arg3 ;
  uint8_t arg4 ;
  void *arg5 = (void *) 0 ;
  size_t arg6 ;
  double *arg7 = (double *) 0 ;
  bool arg8 ;
  player_devaddr_t *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Driver **)&jarg1; 
  argp2 = *(player_devaddr_t **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null player_devaddr_t");
    return ;
  }
  arg2 = *argp2; 
  arg3 = (uint8_t)jarg3; 
  arg4 = (uint8_t)jarg4; 
  arg5 = *(void **)&jarg5; 
  arg6 = (size_t)jarg6; 
  arg7 = *(double **)&jarg7; 
  arg8 = jarg8 ? true : false; 
  (arg1)->Publish(arg2,arg3,arg4,arg5,arg6,arg7,arg8);
}


SWIGEXPORT void JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_Driver_1PublishSwigExplicitDriver_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jshort jarg3, jshort jarg4, jlong jarg5, jlong jarg6, jlong jarg7, jboolean jarg8) {
  Driver *arg1 = (Driver *) 0 ;
  player_devaddr_t arg2 ;
  uint8_t arg3 ;
  uint8_t arg4 ;
  void *arg5 = (void *) 0 ;
  size_t arg6 ;
  double *arg7 = (double *) 0 ;
  bool arg8 ;
  player_devaddr_t *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Driver **)&jarg1; 
  argp2 = *(player_devaddr_t **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null player_devaddr_t");
    return ;
  }
  arg2 = *argp2; 
  arg3 = (uint8_t)jarg3; 
  arg4 = (uint8_t)jarg4; 
  arg5 = *(void **)&jarg5; 
  arg6 = (size_t)jarg6; 
  arg7 = *(double **)&jarg7; 
  arg8 = jarg8 ? true : false; 
  (arg1)->Driver::Publish(arg2,arg3,arg4,arg5,arg6,arg7,arg8);
}


SWIGEXPORT void JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_Driver_1Publish_1_1SWIG_16(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jshort jarg3, jshort jarg4, jlong jarg5, jlong jarg6, jlong jarg7) {
  Driver *arg1 = (Driver *) 0 ;
  player_devaddr_t arg2 ;
  uint8_t arg3 ;
  uint8_t arg4 ;
  void *arg5 = (void *) 0 ;
  size_t arg6 ;
  double *arg7 = (double *) 0 ;
  player_devaddr_t *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Driver **)&jarg1; 
  argp2 = *(player_devaddr_t **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null player_devaddr_t");
    return ;
  }
  arg2 = *argp2; 
  arg3 = (uint8_t)jarg3; 
  arg4 = (uint8_t)jarg4; 
  arg5 = *(void **)&jarg5; 
  arg6 = (size_t)jarg6; 
  arg7 = *(double **)&jarg7; 
  (arg1)->Publish(arg2,arg3,arg4,arg5,arg6,arg7);
}


SWIGEXPORT void JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_Driver_1PublishSwigExplicitDriver_1_1SWIG_16(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jshort jarg3, jshort jarg4, jlong jarg5, jlong jarg6, jlong jarg7) {
  Driver *arg1 = (Driver *) 0 ;
  player_devaddr_t arg2 ;
  uint8_t arg3 ;
  uint8_t arg4 ;
  void *arg5 = (void *) 0 ;
  size_t arg6 ;
  double *arg7 = (double *) 0 ;
  player_devaddr_t *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Driver **)&jarg1; 
  argp2 = *(player_devaddr_t **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null player_devaddr_t");
    return ;
  }
  arg2 = *argp2; 
  arg3 = (uint8_t)jarg3; 
  arg4 = (uint8_t)jarg4; 
  arg5 = *(void **)&jarg5; 
  arg6 = (size_t)jarg6; 
  arg7 = *(double **)&jarg7; 
  (arg1)->Driver::Publish(arg2,arg3,arg4,arg5,arg6,arg7);
}


SWIGEXPORT void JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_Driver_1Publish_1_1SWIG_17(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jshort jarg3, jshort jarg4, jlong jarg5, jlong jarg6) {
  Driver *arg1 = (Driver *) 0 ;
  player_devaddr_t arg2 ;
  uint8_t arg3 ;
  uint8_t arg4 ;
  void *arg5 = (void *) 0 ;
  size_t arg6 ;
  player_devaddr_t *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Driver **)&jarg1; 
  argp2 = *(player_devaddr_t **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null player_devaddr_t");
    return ;
  }
  arg2 = *argp2; 
  arg3 = (uint8_t)jarg3; 
  arg4 = (uint8_t)jarg4; 
  arg5 = *(void **)&jarg5; 
  arg6 = (size_t)jarg6; 
  (arg1)->Publish(arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT void JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_Driver_1PublishSwigExplicitDriver_1_1SWIG_17(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jshort jarg3, jshort jarg4, jlong jarg5, jlong jarg6) {
  Driver *arg1 = (Driver *) 0 ;
  player_devaddr_t arg2 ;
  uint8_t arg3 ;
  uint8_t arg4 ;
  void *arg5 = (void *) 0 ;
  size_t arg6 ;
  player_devaddr_t *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Driver **)&jarg1; 
  argp2 = *(player_devaddr_t **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null player_devaddr_t");
    return ;
  }
  arg2 = *argp2; 
  arg3 = (uint8_t)jarg3; 
  arg4 = (uint8_t)jarg4; 
  arg5 = *(void **)&jarg5; 
  arg6 = (size_t)jarg6; 
  (arg1)->Driver::Publish(arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT void JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_Driver_1Publish_1_1SWIG_18(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jshort jarg3, jshort jarg4, jlong jarg5) {
  Driver *arg1 = (Driver *) 0 ;
  player_devaddr_t arg2 ;
  uint8_t arg3 ;
  uint8_t arg4 ;
  void *arg5 = (void *) 0 ;
  player_devaddr_t *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Driver **)&jarg1; 
  argp2 = *(player_devaddr_t **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null player_devaddr_t");
    return ;
  }
  arg2 = *argp2; 
  arg3 = (uint8_t)jarg3; 
  arg4 = (uint8_t)jarg4; 
  arg5 = *(void **)&jarg5; 
  (arg1)->Publish(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_Driver_1PublishSwigExplicitDriver_1_1SWIG_18(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jshort jarg3, jshort jarg4, jlong jarg5) {
  Driver *arg1 = (Driver *) 0 ;
  player_devaddr_t arg2 ;
  uint8_t arg3 ;
  uint8_t arg4 ;
  void *arg5 = (void *) 0 ;
  player_devaddr_t *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Driver **)&jarg1; 
  argp2 = *(player_devaddr_t **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null player_devaddr_t");
    return ;
  }
  arg2 = *argp2; 
  arg3 = (uint8_t)jarg3; 
  arg4 = (uint8_t)jarg4; 
  arg5 = *(void **)&jarg5; 
  (arg1)->Driver::Publish(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_Driver_1Publish_1_1SWIG_19(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jshort jarg3, jshort jarg4) {
  Driver *arg1 = (Driver *) 0 ;
  player_devaddr_t arg2 ;
  uint8_t arg3 ;
  uint8_t arg4 ;
  player_devaddr_t *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Driver **)&jarg1; 
  argp2 = *(player_devaddr_t **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null player_devaddr_t");
    return ;
  }
  arg2 = *argp2; 
  arg3 = (uint8_t)jarg3; 
  arg4 = (uint8_t)jarg4; 
  (arg1)->Publish(arg2,arg3,arg4);
}


SWIGEXPORT void JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_Driver_1PublishSwigExplicitDriver_1_1SWIG_19(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jshort jarg3, jshort jarg4) {
  Driver *arg1 = (Driver *) 0 ;
  player_devaddr_t arg2 ;
  uint8_t arg3 ;
  uint8_t arg4 ;
  player_devaddr_t *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Driver **)&jarg1; 
  argp2 = *(player_devaddr_t **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null player_devaddr_t");
    return ;
  }
  arg2 = *argp2; 
  arg3 = (uint8_t)jarg3; 
  arg4 = (uint8_t)jarg4; 
  (arg1)->Driver::Publish(arg2,arg3,arg4);
}


SWIGEXPORT void JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_Driver_1Publish_1_1SWIG_110(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jboolean jarg5) {
  Driver *arg1 = (Driver *) 0 ;
  QueuePointer *arg2 = 0 ;
  player_msghdr_t *arg3 = (player_msghdr_t *) 0 ;
  void *arg4 = (void *) 0 ;
  bool arg5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(Driver **)&jarg1; 
  arg2 = *(QueuePointer **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "QueuePointer & reference is null");
    return ;
  } 
  arg3 = *(player_msghdr_t **)&jarg3; 
  arg4 = *(void **)&jarg4; 
  arg5 = jarg5 ? true : false; 
  (arg1)->Publish(*arg2,arg3,arg4,arg5);
}


SWIGEXPORT void JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_Driver_1PublishSwigExplicitDriver_1_1SWIG_110(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jboolean jarg5) {
  Driver *arg1 = (Driver *) 0 ;
  QueuePointer *arg2 = 0 ;
  player_msghdr_t *arg3 = (player_msghdr_t *) 0 ;
  void *arg4 = (void *) 0 ;
  bool arg5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(Driver **)&jarg1; 
  arg2 = *(QueuePointer **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "QueuePointer & reference is null");
    return ;
  } 
  arg3 = *(player_msghdr_t **)&jarg3; 
  arg4 = *(void **)&jarg4; 
  arg5 = jarg5 ? true : false; 
  (arg1)->Driver::Publish(*arg2,arg3,arg4,arg5);
}


SWIGEXPORT void JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_Driver_1Publish_1_1SWIG_111(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4) {
  Driver *arg1 = (Driver *) 0 ;
  QueuePointer *arg2 = 0 ;
  player_msghdr_t *arg3 = (player_msghdr_t *) 0 ;
  void *arg4 = (void *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(Driver **)&jarg1; 
  arg2 = *(QueuePointer **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "QueuePointer & reference is null");
    return ;
  } 
  arg3 = *(player_msghdr_t **)&jarg3; 
  arg4 = *(void **)&jarg4; 
  (arg1)->Publish(*arg2,arg3,arg4);
}


SWIGEXPORT void JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_Driver_1PublishSwigExplicitDriver_1_1SWIG_111(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4) {
  Driver *arg1 = (Driver *) 0 ;
  QueuePointer *arg2 = 0 ;
  player_msghdr_t *arg3 = (player_msghdr_t *) 0 ;
  void *arg4 = (void *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(Driver **)&jarg1; 
  arg2 = *(QueuePointer **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "QueuePointer & reference is null");
    return ;
  } 
  arg3 = *(player_msghdr_t **)&jarg3; 
  arg4 = *(void **)&jarg4; 
  (arg1)->Driver::Publish(*arg2,arg3,arg4);
}


SWIGEXPORT void JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_Driver_1Publish_1_1SWIG_112(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jboolean jarg4) {
  Driver *arg1 = (Driver *) 0 ;
  player_msghdr_t *arg2 = (player_msghdr_t *) 0 ;
  void *arg3 = (void *) 0 ;
  bool arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Driver **)&jarg1; 
  arg2 = *(player_msghdr_t **)&jarg2; 
  arg3 = *(void **)&jarg3; 
  arg4 = jarg4 ? true : false; 
  (arg1)->Publish(arg2,arg3,arg4);
}


SWIGEXPORT void JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_Driver_1PublishSwigExplicitDriver_1_1SWIG_112(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jboolean jarg4) {
  Driver *arg1 = (Driver *) 0 ;
  player_msghdr_t *arg2 = (player_msghdr_t *) 0 ;
  void *arg3 = (void *) 0 ;
  bool arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Driver **)&jarg1; 
  arg2 = *(player_msghdr_t **)&jarg2; 
  arg3 = *(void **)&jarg3; 
  arg4 = jarg4 ? true : false; 
  (arg1)->Driver::Publish(arg2,arg3,arg4);
}


SWIGEXPORT void JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_Driver_1Publish_1_1SWIG_113(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  Driver *arg1 = (Driver *) 0 ;
  player_msghdr_t *arg2 = (player_msghdr_t *) 0 ;
  void *arg3 = (void *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Driver **)&jarg1; 
  arg2 = *(player_msghdr_t **)&jarg2; 
  arg3 = *(void **)&jarg3; 
  (arg1)->Publish(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_Driver_1PublishSwigExplicitDriver_1_1SWIG_113(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  Driver *arg1 = (Driver *) 0 ;
  player_msghdr_t *arg2 = (player_msghdr_t *) 0 ;
  void *arg3 = (void *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Driver **)&jarg1; 
  arg2 = *(player_msghdr_t **)&jarg2; 
  arg3 = *(void **)&jarg3; 
  (arg1)->Driver::Publish(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_Driver_1device_1addr_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Driver *arg1 = (Driver *) 0 ;
  player_devaddr_t *arg2 = (player_devaddr_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Driver **)&jarg1; 
  arg2 = *(player_devaddr_t **)&jarg2; 
  if (arg1) (arg1)->device_addr = *arg2;
  
}


SWIGEXPORT jlong JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_Driver_1device_1addr_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Driver *arg1 = (Driver *) 0 ;
  player_devaddr_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Driver **)&jarg1; 
  result = (player_devaddr_t *)& ((arg1)->device_addr);
  *(player_devaddr_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_Driver_1subscriptions_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Driver *arg1 = (Driver *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Driver **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->subscriptions = arg2;
  
}


SWIGEXPORT jint JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_Driver_1subscriptions_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Driver *arg1 = (Driver *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Driver **)&jarg1; 
  result = (int) ((arg1)->subscriptions);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_Driver_1entries_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Driver *arg1 = (Driver *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Driver **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->entries = arg2;
  
}


SWIGEXPORT jint JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_Driver_1entries_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Driver *arg1 = (Driver *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Driver **)&jarg1; 
  result = (int) ((arg1)->entries);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_Driver_1alwayson_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  Driver *arg1 = (Driver *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Driver **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->alwayson = arg2;
  
}


SWIGEXPORT jboolean JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_Driver_1alwayson_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Driver *arg1 = (Driver *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Driver **)&jarg1; 
  result = (bool) ((arg1)->alwayson);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_Driver_1InQueue_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Driver *arg1 = (Driver *) 0 ;
  QueuePointer *arg2 = (QueuePointer *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Driver **)&jarg1; 
  arg2 = *(QueuePointer **)&jarg2; 
  if (arg1) (arg1)->InQueue = *arg2;
  
}


SWIGEXPORT jlong JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_Driver_1InQueue_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Driver *arg1 = (Driver *) 0 ;
  QueuePointer *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Driver **)&jarg1; 
  result = (QueuePointer *)& ((arg1)->InQueue);
  *(QueuePointer **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_new_1Driver_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jboolean jarg3, jlong jarg4, jint jarg5) {
  jlong jresult = 0 ;
  ConfigFile *arg1 = (ConfigFile *) 0 ;
  int arg2 ;
  bool arg3 ;
  size_t arg4 ;
  int arg5 ;
  Driver *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ConfigFile **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = jarg3 ? true : false; 
  arg4 = (size_t)jarg4; 
  arg5 = (int)jarg5; 
  result = (Driver *)new SwigDirector_Driver(jenv,arg1,arg2,arg3,arg4,arg5);
  *(Driver **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_new_1Driver_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jboolean jarg3, jlong jarg4) {
  jlong jresult = 0 ;
  ConfigFile *arg1 = (ConfigFile *) 0 ;
  int arg2 ;
  bool arg3 ;
  size_t arg4 ;
  Driver *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ConfigFile **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = jarg3 ? true : false; 
  arg4 = (size_t)jarg4; 
  result = (Driver *)new SwigDirector_Driver(jenv,arg1,arg2,arg3,arg4);
  *(Driver **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_new_1Driver_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jboolean jarg3) {
  jlong jresult = 0 ;
  ConfigFile *arg1 = (ConfigFile *) 0 ;
  int arg2 ;
  bool arg3 ;
  Driver *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ConfigFile **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = jarg3 ? true : false; 
  result = (Driver *)new SwigDirector_Driver(jenv,arg1,arg2,arg3);
  *(Driver **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_new_1Driver_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  ConfigFile *arg1 = (ConfigFile *) 0 ;
  int arg2 ;
  Driver *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ConfigFile **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (Driver *)new SwigDirector_Driver(jenv,arg1,arg2);
  *(Driver **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_delete_1Driver(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Driver *arg1 = (Driver *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Driver **)&jarg1; 
  delete arg1;
  
}


SWIGEXPORT jint JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_Driver_1GetError(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Driver *arg1 = (Driver *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Driver **)&jarg1; 
  result = (int)(arg1)->GetError();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_Driver_1Subscribe_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  Driver *arg1 = (Driver *) 0 ;
  player_devaddr_t arg2 ;
  int result;
  player_devaddr_t *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Driver **)&jarg1; 
  argp2 = *(player_devaddr_t **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null player_devaddr_t");
    return 0;
  }
  arg2 = *argp2; 
  result = (int)(arg1)->Subscribe(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_Driver_1Subscribe_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jint jresult = 0 ;
  Driver *arg1 = (Driver *) 0 ;
  QueuePointer *arg2 = 0 ;
  player_devaddr_t arg3 ;
  int result;
  player_devaddr_t *argp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(Driver **)&jarg1; 
  arg2 = *(QueuePointer **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "QueuePointer & reference is null");
    return 0;
  } 
  argp3 = *(player_devaddr_t **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null player_devaddr_t");
    return 0;
  }
  arg3 = *argp3; 
  result = (int)(arg1)->Subscribe(*arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_Driver_1Unsubscribe_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  Driver *arg1 = (Driver *) 0 ;
  player_devaddr_t arg2 ;
  int result;
  player_devaddr_t *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Driver **)&jarg1; 
  argp2 = *(player_devaddr_t **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null player_devaddr_t");
    return 0;
  }
  arg2 = *argp2; 
  result = (int)(arg1)->Unsubscribe(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_Driver_1Unsubscribe_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jint jresult = 0 ;
  Driver *arg1 = (Driver *) 0 ;
  QueuePointer *arg2 = 0 ;
  player_devaddr_t arg3 ;
  int result;
  player_devaddr_t *argp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(Driver **)&jarg1; 
  arg2 = *(QueuePointer **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "QueuePointer & reference is null");
    return 0;
  } 
  argp3 = *(player_devaddr_t **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null player_devaddr_t");
    return 0;
  }
  arg3 = *argp3; 
  result = (int)(arg1)->Unsubscribe(*arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_Driver_1Setup(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Driver *arg1 = (Driver *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Driver **)&jarg1; 
  result = (int)(arg1)->Setup();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_Driver_1Shutdown(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Driver *arg1 = (Driver *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Driver **)&jarg1; 
  result = (int)(arg1)->Shutdown();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_Driver_1Main(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  Driver *arg1 = (Driver *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Driver **)&jarg1; 
  (arg1)->Main();
}


SWIGEXPORT void JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_Driver_1MainSwigExplicitDriver(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  Driver *arg1 = (Driver *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Driver **)&jarg1; 
  (arg1)->Driver::Main();
}


SWIGEXPORT void JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_Driver_1MainQuit(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  Driver *arg1 = (Driver *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Driver **)&jarg1; 
  (arg1)->MainQuit();
}


SWIGEXPORT void JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_Driver_1MainQuitSwigExplicitDriver(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  Driver *arg1 = (Driver *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Driver **)&jarg1; 
  (arg1)->Driver::MainQuit();
}


SWIGEXPORT void JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_Driver_1ProcessMessages_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Driver *arg1 = (Driver *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Driver **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->ProcessMessages(arg2);
}


SWIGEXPORT void JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_Driver_1ProcessMessages_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  Driver *arg1 = (Driver *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Driver **)&jarg1; 
  (arg1)->ProcessMessages();
}


SWIGEXPORT jint JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_Driver_1ProcessMessage(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4) {
  jint jresult = 0 ;
  Driver *arg1 = (Driver *) 0 ;
  QueuePointer *arg2 = 0 ;
  player_msghdr *arg3 = (player_msghdr *) 0 ;
  void *arg4 = (void *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(Driver **)&jarg1; 
  arg2 = *(QueuePointer **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "QueuePointer & reference is null");
    return 0;
  } 
  arg3 = *(player_msghdr **)&jarg3; 
  arg4 = *(void **)&jarg4; 
  result = (int)(arg1)->ProcessMessage(*arg2,arg3,arg4);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_Driver_1Update(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  Driver *arg1 = (Driver *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Driver **)&jarg1; 
  (arg1)->Update();
}


SWIGEXPORT void JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_Driver_1UpdateSwigExplicitDriver(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  Driver *arg1 = (Driver *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Driver **)&jarg1; 
  (arg1)->Driver::Update();
}


SWIGEXPORT jint JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_Driver_1ProcessInternalMessages(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4) {
  jint jresult = 0 ;
  Driver *arg1 = (Driver *) 0 ;
  QueuePointer *arg2 = 0 ;
  player_msghdr *arg3 = (player_msghdr *) 0 ;
  void *arg4 = (void *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(Driver **)&jarg1; 
  arg2 = *(QueuePointer **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "QueuePointer & reference is null");
    return 0;
  } 
  arg3 = *(player_msghdr **)&jarg3; 
  arg4 = *(void **)&jarg4; 
  result = (int)(arg1)->ProcessInternalMessages(*arg2,arg3,arg4);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_Driver_1ProcessInternalMessagesSwigExplicitDriver(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4) {
  jint jresult = 0 ;
  Driver *arg1 = (Driver *) 0 ;
  QueuePointer *arg2 = 0 ;
  player_msghdr *arg3 = (player_msghdr *) 0 ;
  void *arg4 = (void *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(Driver **)&jarg1; 
  arg2 = *(QueuePointer **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "QueuePointer & reference is null");
    return 0;
  } 
  arg3 = *(player_msghdr **)&jarg3; 
  arg4 = *(void **)&jarg4; 
  result = (int)(arg1)->Driver::ProcessInternalMessages(*arg2,arg3,arg4);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_Driver_1RegisterProperty_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jlong jarg4, jobject jarg4_, jint jarg5) {
  jboolean jresult = 0 ;
  Driver *arg1 = (Driver *) 0 ;
  char *arg2 = (char *) 0 ;
  Property *arg3 = (Property *) 0 ;
  ConfigFile *arg4 = (ConfigFile *) 0 ;
  int arg5 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg4_;
  arg1 = *(Driver **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = *(Property **)&jarg3; 
  arg4 = *(ConfigFile **)&jarg4; 
  arg5 = (int)jarg5; 
  result = (bool)(arg1)->RegisterProperty((char const *)arg2,arg3,arg4,arg5);
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_Driver_1RegisterPropertySwigExplicitDriver_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jlong jarg4, jobject jarg4_, jint jarg5) {
  jboolean jresult = 0 ;
  Driver *arg1 = (Driver *) 0 ;
  char *arg2 = (char *) 0 ;
  Property *arg3 = (Property *) 0 ;
  ConfigFile *arg4 = (ConfigFile *) 0 ;
  int arg5 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg4_;
  arg1 = *(Driver **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = *(Property **)&jarg3; 
  arg4 = *(ConfigFile **)&jarg4; 
  arg5 = (int)jarg5; 
  result = (bool)(arg1)->Driver::RegisterProperty((char const *)arg2,arg3,arg4,arg5);
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_Driver_1RegisterProperty_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jobject jarg3_, jint jarg4) {
  jboolean jresult = 0 ;
  Driver *arg1 = (Driver *) 0 ;
  Property *arg2 = (Property *) 0 ;
  ConfigFile *arg3 = (ConfigFile *) 0 ;
  int arg4 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(Driver **)&jarg1; 
  arg2 = *(Property **)&jarg2; 
  arg3 = *(ConfigFile **)&jarg3; 
  arg4 = (int)jarg4; 
  result = (bool)(arg1)->RegisterProperty(arg2,arg3,arg4);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_Driver_1RegisterPropertySwigExplicitDriver_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jobject jarg3_, jint jarg4) {
  jboolean jresult = 0 ;
  Driver *arg1 = (Driver *) 0 ;
  Property *arg2 = (Property *) 0 ;
  ConfigFile *arg3 = (ConfigFile *) 0 ;
  int arg4 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(Driver **)&jarg1; 
  arg2 = *(Property **)&jarg2; 
  arg3 = *(ConfigFile **)&jarg3; 
  arg4 = (int)jarg4; 
  result = (bool)(arg1)->Driver::RegisterProperty(arg2,arg3,arg4);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_Driver_1director_1connect(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jswig_mem_own, jboolean jweak_global) {
  Driver *obj = *((Driver **)&objarg);
  (void)jcls;
  SwigDirector_Driver *director = dynamic_cast<SwigDirector_Driver *>(obj);
  if (director) {
    director->swig_connect_director(jenv, jself, jenv->GetObjectClass(jself), (jswig_mem_own == JNI_TRUE), (jweak_global == JNI_TRUE));
  }
}


SWIGEXPORT void JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_Driver_1change_1ownership(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jtake_or_release) {
  Driver *obj = *((Driver **)&objarg);
  SwigDirector_Driver *director = dynamic_cast<SwigDirector_Driver *>(obj);
  (void)jcls;
  if (director) {
    director->swig_java_change_ownership(jenv, jself, jtake_or_release ? true : false);
  }
}


SWIGEXPORT void JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_DriverEntry_1initfunc_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  DriverEntry *arg1 = (DriverEntry *) 0 ;
  DriverInitFn arg2 = (DriverInitFn) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DriverEntry **)&jarg1; 
  arg2 = *(DriverInitFn *)&jarg2; 
  if (arg1) (arg1)->initfunc = arg2;
  
}


SWIGEXPORT jlong JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_DriverEntry_1initfunc_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  DriverEntry *arg1 = (DriverEntry *) 0 ;
  DriverInitFn result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DriverEntry **)&jarg1; 
  result = (DriverInitFn) ((arg1)->initfunc);
  *(DriverInitFn *)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_DriverEntry_1name_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  DriverEntry *arg1 = (DriverEntry *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DriverEntry **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if (arg2) strncpy((char *)arg1->name, (const char *)arg2, PLAYER_MAX_DRIVER_STRING_LEN);
    else arg1->name[0] = 0;
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_DriverEntry_1name_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  DriverEntry *arg1 = (DriverEntry *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DriverEntry **)&jarg1; 
  result = (char *)(char *) ((arg1)->name);
  if(result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_DriverEntry_1next_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  DriverEntry *arg1 = (DriverEntry *) 0 ;
  DriverEntry *arg2 = (DriverEntry *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(DriverEntry **)&jarg1; 
  arg2 = *(DriverEntry **)&jarg2; 
  if (arg1) (arg1)->next = arg2;
  
}


SWIGEXPORT jlong JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_DriverEntry_1next_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  DriverEntry *arg1 = (DriverEntry *) 0 ;
  DriverEntry *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DriverEntry **)&jarg1; 
  result = (DriverEntry *) ((arg1)->next);
  *(DriverEntry **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_new_1DriverEntry(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  DriverEntry *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (DriverEntry *)new DriverEntry();
  *(DriverEntry **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_delete_1DriverEntry(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  DriverEntry *arg1 = (DriverEntry *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(DriverEntry **)&jarg1; 
  delete arg1;
  
}


SWIGEXPORT jlong JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_new_1DriverTable(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  DriverTable *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (DriverTable *)new DriverTable();
  *(DriverTable **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_delete_1DriverTable(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  DriverTable *arg1 = (DriverTable *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(DriverTable **)&jarg1; 
  delete arg1;
  
}


SWIGEXPORT jint JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_DriverTable_1AddDriver(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3) {
  jint jresult = 0 ;
  DriverTable *arg1 = (DriverTable *) 0 ;
  char *arg2 = (char *) 0 ;
  DriverInitFn arg3 = (DriverInitFn) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DriverTable **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = *(DriverInitFn *)&jarg3; 
  result = (int)(arg1)->AddDriver((char const *)arg2,arg3);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_DriverTable_1GetDriverEntry(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  DriverTable *arg1 = (DriverTable *) 0 ;
  char *arg2 = (char *) 0 ;
  DriverEntry *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DriverTable **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (DriverEntry *)(arg1)->GetDriverEntry((char const *)arg2);
  *(DriverEntry **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_DriverTable_1Size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  DriverTable *arg1 = (DriverTable *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DriverTable **)&jarg1; 
  result = (int)(arg1)->Size();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_DriverTable_1GetDriverName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jstring jresult = 0 ;
  DriverTable *arg1 = (DriverTable *) 0 ;
  int arg2 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DriverTable **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (char *)(arg1)->GetDriverName(arg2);
  if(result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_DriverTable_1SortDrivers(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  DriverTable *arg1 = (DriverTable *) 0 ;
  char **result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DriverTable **)&jarg1; 
  result = (char **)(arg1)->SortDrivers();
  *(char ***)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_ErrorInit(JNIEnv *jenv, jclass jcls, jint jarg1) {
  int arg1 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  ErrorInit(arg1);
}


SWIGEXPORT void JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_DefaultErrorPrint(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2, jstring jarg3, jint jarg4, jstring jarg5) {
  int arg1 ;
  int arg2 ;
  char *arg3 = (char *) 0 ;
  int arg4 ;
  char *arg5 = (char *) 0 ;
  void *arg6 = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return ;
  }
  arg4 = (int)jarg4; 
  arg5 = 0;
  if (jarg5) {
    arg5 = (char *)jenv->GetStringUTFChars(jarg5, 0);
    if (!arg5) return ;
  }
  DefaultErrorPrint(arg1,arg2,(char const *)arg3,arg4,(char const *)arg5,arg6);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  if (arg5) jenv->ReleaseStringUTFChars(jarg5, (const char *)arg5);
}


SWIGEXPORT void JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_ErrorPrint_1set(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  void (*arg1)(int,int,char const *,int,char const *,...) = (void (*)(int,int,char const *,int,char const *,...)) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(void (**)(int,int,char const *,int,char const *,...))&jarg1; 
  ErrorPrint = arg1;
  
}


SWIGEXPORT jlong JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_ErrorPrint_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  void (*result)(int,int,char const *,int,char const *,...) = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (void (*)(int,int,char const *,int,char const *,...))ErrorPrint;
  *(void (**)(int,int,char const *,int,char const *,...))&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_msgLevel_1set(JNIEnv *jenv, jclass jcls, jint jarg1) {
  int arg1 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  msgLevel = arg1;
  
}


SWIGEXPORT jint JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_msgLevel_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)msgLevel;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_msgFile_1set(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  FILE *arg1 = (FILE *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FILE **)&jarg1; 
  msgFile = arg1;
  
}


SWIGEXPORT jlong JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_msgFile_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  FILE *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (FILE *)msgFile;
  *(FILE **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_PLAYER_1ERR_1ERR_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int) 0;
  
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_PLAYER_1ERR_1WARN_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int) 1;
  
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_PLAYER_1ERR_1MSG_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int) 2;
  
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_PLAYER_1ERR_1DBG_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int) 2;
  
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_deviceTable_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  DeviceTable *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (DeviceTable *)deviceTable;
  *(DeviceTable **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_GlobalTime_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  PlayerTime *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (PlayerTime *)GlobalTime;
  *(PlayerTime **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_driverTable_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  DriverTable *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (DriverTable *)driverTable;
  *(DriverTable **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_fileWatcher_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  FileWatcher *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (FileWatcher *)fileWatcher;
  *(FileWatcher **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_playerversion_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)playerversion;
  if(result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_player_1quit_1get(JNIEnv *jenv, jclass jcls) {
  jboolean jresult = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  result = (bool)player_quit;
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_player_1quiet_1startup_1get(JNIEnv *jenv, jclass jcls) {
  jboolean jresult = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  result = (bool)player_quiet_startup;
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_player_1argc_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)player_argc;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_player_1argv_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  char **result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char **)player_argv;
  *(char ***)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_player_1globals_1init(JNIEnv *jenv, jclass jcls) {
  (void)jenv;
  (void)jcls;
  player_globals_init();
}


SWIGEXPORT void JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_player_1globals_1fini(JNIEnv *jenv, jclass jcls) {
  (void)jenv;
  (void)jcls;
  player_globals_fini();
}


SWIGEXPORT jlong JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_new_1QueuePointer_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  QueuePointer *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (QueuePointer *)new QueuePointer();
  *(QueuePointer **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_new_1QueuePointer_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jboolean jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  bool arg1 ;
  size_t arg2 ;
  QueuePointer *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = jarg1 ? true : false; 
  arg2 = (size_t)jarg2; 
  result = (QueuePointer *)new QueuePointer(arg1,arg2);
  *(QueuePointer **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_delete_1QueuePointer(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  QueuePointer *arg1 = (QueuePointer *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(QueuePointer **)&jarg1; 
  delete arg1;
  
}


SWIGEXPORT jlong JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_new_1QueuePointer_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  QueuePointer *arg1 = 0 ;
  QueuePointer *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(QueuePointer **)&jarg1;
  if(!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "QueuePointer const & reference is null");
    return 0;
  } 
  result = (QueuePointer *)new QueuePointer((QueuePointer const &)*arg1);
  *(QueuePointer **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_QueuePointer_1_1_1deref_1_1(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  QueuePointer *arg1 = (QueuePointer *) 0 ;
  MessageQueue *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(QueuePointer **)&jarg1; 
  result = (MessageQueue *)(arg1)->operator ->();
  *(MessageQueue **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_QueuePointer_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  QueuePointer *arg1 = (QueuePointer *) 0 ;
  MessageQueue *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(QueuePointer **)&jarg1; 
  result = (MessageQueue *)((QueuePointer const *)arg1)->get();
  *(MessageQueue **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_QueuePointer_1_1_1ref_1_1(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  QueuePointer *arg1 = (QueuePointer *) 0 ;
  MessageQueue *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(QueuePointer **)&jarg1; 
  {
    MessageQueue &_result_ref = (arg1)->operator *();
    result = (MessageQueue *) &_result_ref;
  }
  *(MessageQueue **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_QueuePointer_1Empty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  QueuePointer *arg1 = (QueuePointer *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(QueuePointer **)&jarg1; 
  result = (bool)(*arg1)->Empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_QueuePointer_1Push(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  QueuePointer *arg1 = (QueuePointer *) 0 ;
  Message *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(QueuePointer **)&jarg1; 
  arg2 = *(Message **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Message & reference is null");
    return 0;
  } 
  result = (bool)(*arg1)->Push(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_QueuePointer_1PushFront(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jboolean jarg3) {
  QueuePointer *arg1 = (QueuePointer *) 0 ;
  Message *arg2 = 0 ;
  bool arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(QueuePointer **)&jarg1; 
  arg2 = *(Message **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Message & reference is null");
    return ;
  } 
  arg3 = jarg3 ? true : false; 
  (*arg1)->PushFront(*arg2,arg3);
}


SWIGEXPORT void JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_QueuePointer_1PushBack(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jboolean jarg3) {
  QueuePointer *arg1 = (QueuePointer *) 0 ;
  Message *arg2 = 0 ;
  bool arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(QueuePointer **)&jarg1; 
  arg2 = *(Message **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Message & reference is null");
    return ;
  } 
  arg3 = jarg3 ? true : false; 
  (*arg1)->PushBack(*arg2,arg3);
}


SWIGEXPORT jlong JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_QueuePointer_1Pop(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  QueuePointer *arg1 = (QueuePointer *) 0 ;
  Message *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(QueuePointer **)&jarg1; 
  result = (Message *)(*arg1)->Pop();
  *(Message **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_QueuePointer_1SetReplace(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  QueuePointer *arg1 = (QueuePointer *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(QueuePointer **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (*arg1)->SetReplace(arg2);
}


SWIGEXPORT void JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_QueuePointer_1AddReplaceRule_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jint jarg4, jint jarg5, jint jarg6, jint jarg7, jint jarg8) {
  QueuePointer *arg1 = (QueuePointer *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  int arg7 ;
  int arg8 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(QueuePointer **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  arg7 = (int)jarg7; 
  arg8 = (int)jarg8; 
  (*arg1)->AddReplaceRule(arg2,arg3,arg4,arg5,arg6,arg7,arg8);
}


SWIGEXPORT void JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_QueuePointer_1AddReplaceRule_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3, jint jarg4, jint jarg5) {
  QueuePointer *arg1 = (QueuePointer *) 0 ;
  player_devaddr_t *arg2 = 0 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(QueuePointer **)&jarg1; 
  arg2 = *(player_devaddr_t **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "player_devaddr_t const & reference is null");
    return ;
  } 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  (*arg1)->AddReplaceRule((player_devaddr_t const &)*arg2,arg3,arg4,arg5);
}


SWIGEXPORT jint JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_QueuePointer_1CheckReplace(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  QueuePointer *arg1 = (QueuePointer *) 0 ;
  player_msghdr_t *arg2 = (player_msghdr_t *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(QueuePointer **)&jarg1; 
  arg2 = *(player_msghdr_t **)&jarg2; 
  result = (int)(*arg1)->CheckReplace(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_QueuePointer_1Wait_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  jboolean jresult = 0 ;
  QueuePointer *arg1 = (QueuePointer *) 0 ;
  double arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(QueuePointer **)&jarg1; 
  arg2 = (double)jarg2; 
  result = (bool)(*arg1)->Wait(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_QueuePointer_1Wait_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  QueuePointer *arg1 = (QueuePointer *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(QueuePointer **)&jarg1; 
  result = (bool)(*arg1)->Wait();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_QueuePointer_1DataAvailable(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  QueuePointer *arg1 = (QueuePointer *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(QueuePointer **)&jarg1; 
  (*arg1)->DataAvailable();
}


SWIGEXPORT jboolean JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_QueuePointer_1Filter(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  QueuePointer *arg1 = (QueuePointer *) 0 ;
  Message *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(QueuePointer **)&jarg1; 
  arg2 = *(Message **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Message & reference is null");
    return 0;
  } 
  result = (bool)(*arg1)->Filter(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_QueuePointer_1ClearFilter(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  QueuePointer *arg1 = (QueuePointer *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(QueuePointer **)&jarg1; 
  (*arg1)->ClearFilter();
}


SWIGEXPORT void JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_QueuePointer_1SetFilter(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jint jarg4, jint jarg5, jint jarg6, jint jarg7) {
  QueuePointer *arg1 = (QueuePointer *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  int arg7 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(QueuePointer **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  arg7 = (int)jarg7; 
  (*arg1)->SetFilter(arg2,arg3,arg4,arg5,arg6,arg7);
}


SWIGEXPORT void JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_QueuePointer_1SetPull(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  QueuePointer *arg1 = (QueuePointer *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(QueuePointer **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (*arg1)->SetPull(arg2);
}


SWIGEXPORT jlong JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_QueuePointer_1GetLength(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  QueuePointer *arg1 = (QueuePointer *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(QueuePointer **)&jarg1; 
  result = (*arg1)->GetLength();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_QueuePointer_1SetDataRequested(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2, jboolean jarg3) {
  QueuePointer *arg1 = (QueuePointer *) 0 ;
  bool arg2 ;
  bool arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(QueuePointer **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  arg3 = jarg3 ? true : false; 
  (*arg1)->SetDataRequested(arg2,arg3);
}


SWIGEXPORT jlong JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_new_1Message_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jboolean jarg3) {
  jlong jresult = 0 ;
  player_msghdr *arg1 = 0 ;
  void *arg2 = (void *) 0 ;
  bool arg3 ;
  Message *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(player_msghdr **)&jarg1;
  if(!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "player_msghdr const & reference is null");
    return 0;
  } 
  arg2 = *(void **)&jarg2; 
  arg3 = jarg3 ? true : false; 
  result = (Message *)new Message((player_msghdr const &)*arg1,arg2,arg3);
  *(Message **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_new_1Message_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  player_msghdr *arg1 = 0 ;
  void *arg2 = (void *) 0 ;
  Message *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(player_msghdr **)&jarg1;
  if(!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "player_msghdr const & reference is null");
    return 0;
  } 
  arg2 = *(void **)&jarg2; 
  result = (Message *)new Message((player_msghdr const &)*arg1,arg2);
  *(Message **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_new_1Message_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jobject jarg3_, jboolean jarg4) {
  jlong jresult = 0 ;
  player_msghdr *arg1 = 0 ;
  void *arg2 = (void *) 0 ;
  QueuePointer *arg3 = 0 ;
  bool arg4 ;
  Message *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(player_msghdr **)&jarg1;
  if(!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "player_msghdr const & reference is null");
    return 0;
  } 
  arg2 = *(void **)&jarg2; 
  arg3 = *(QueuePointer **)&jarg3;
  if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "QueuePointer & reference is null");
    return 0;
  } 
  arg4 = jarg4 ? true : false; 
  result = (Message *)new Message((player_msghdr const &)*arg1,arg2,*arg3,arg4);
  *(Message **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_new_1Message_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  player_msghdr *arg1 = 0 ;
  void *arg2 = (void *) 0 ;
  QueuePointer *arg3 = 0 ;
  Message *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(player_msghdr **)&jarg1;
  if(!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "player_msghdr const & reference is null");
    return 0;
  } 
  arg2 = *(void **)&jarg2; 
  arg3 = *(QueuePointer **)&jarg3;
  if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "QueuePointer & reference is null");
    return 0;
  } 
  result = (Message *)new Message((player_msghdr const &)*arg1,arg2,*arg3);
  *(Message **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_new_1Message_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Message *arg1 = 0 ;
  Message *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Message **)&jarg1;
  if(!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Message const & reference is null");
    return 0;
  } 
  result = (Message *)new Message((Message const &)*arg1);
  *(Message **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_delete_1Message(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Message *arg1 = (Message *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Message **)&jarg1; 
  delete arg1;
  
}


SWIGEXPORT jboolean JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_Message_1MatchMessage_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jlong jarg4, jobject jarg4_) {
  jboolean jresult = 0 ;
  player_msghdr_t *arg1 = (player_msghdr_t *) 0 ;
  int arg2 ;
  int arg3 ;
  player_devaddr_t arg4 ;
  bool result;
  player_devaddr_t *argp4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg4_;
  arg1 = *(player_msghdr_t **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  argp4 = *(player_devaddr_t **)&jarg4; 
  if (!argp4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null player_devaddr_t");
    return 0;
  }
  arg4 = *argp4; 
  result = (bool)Message::MatchMessage(arg1,arg2,arg3,arg4);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_Message_1MatchMessage_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  jboolean jresult = 0 ;
  player_msghdr_t *arg1 = (player_msghdr_t *) 0 ;
  int arg2 ;
  int arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(player_msghdr_t **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (bool)Message::MatchMessage(arg1,arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_Message_1GetHeader(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Message *arg1 = (Message *) 0 ;
  player_msghdr_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Message **)&jarg1; 
  result = (player_msghdr_t *)(arg1)->GetHeader();
  *(player_msghdr_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_Message_1GetPayload(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Message *arg1 = (Message *) 0 ;
  void *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Message **)&jarg1; 
  result = (void *)(arg1)->GetPayload();
  *(void **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_Message_1GetDataSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Message *arg1 = (Message *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Message **)&jarg1; 
  result = (unsigned int)(arg1)->GetDataSize();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_Message_1Compare(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  Message *arg1 = (Message *) 0 ;
  Message *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Message **)&jarg1; 
  arg2 = *(Message **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Message & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->Compare(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_Message_1DecRef(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  Message *arg1 = (Message *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Message **)&jarg1; 
  (arg1)->DecRef();
}


SWIGEXPORT void JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_Message_1Queue_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Message *arg1 = (Message *) 0 ;
  QueuePointer *arg2 = (QueuePointer *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Message **)&jarg1; 
  arg2 = *(QueuePointer **)&jarg2; 
  if (arg1) (arg1)->Queue = *arg2;
  
}


SWIGEXPORT jlong JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_Message_1Queue_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Message *arg1 = (Message *) 0 ;
  QueuePointer *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Message **)&jarg1; 
  result = (QueuePointer *)& ((arg1)->Queue);
  *(QueuePointer **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_Message_1RefCount_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  Message *arg1 = (Message *) 0 ;
  unsigned int *arg2 = (unsigned int *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Message **)&jarg1; 
  arg2 = *(unsigned int **)&jarg2; 
  if (arg1) (arg1)->RefCount = arg2;
  
}


SWIGEXPORT jlong JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_Message_1RefCount_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Message *arg1 = (Message *) 0 ;
  unsigned int *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Message **)&jarg1; 
  result = (unsigned int *) ((arg1)->RefCount);
  *(unsigned int **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_new_1MessageQueueElement(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  MessageQueueElement *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (MessageQueueElement *)new MessageQueueElement();
  *(MessageQueueElement **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_delete_1MessageQueueElement(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  MessageQueueElement *arg1 = (MessageQueueElement *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(MessageQueueElement **)&jarg1; 
  delete arg1;
  
}


SWIGEXPORT void JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_MessageQueueElement_1msg_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  MessageQueueElement *arg1 = (MessageQueueElement *) 0 ;
  Message *arg2 = (Message *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(MessageQueueElement **)&jarg1; 
  arg2 = *(Message **)&jarg2; 
  if (arg1) (arg1)->msg = arg2;
  
}


SWIGEXPORT jlong JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_MessageQueueElement_1msg_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  MessageQueueElement *arg1 = (MessageQueueElement *) 0 ;
  Message *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MessageQueueElement **)&jarg1; 
  result = (Message *) ((arg1)->msg);
  *(Message **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_new_1MessageReplaceRule(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2, jint jarg3, jint jarg4, jint jarg5, jint jarg6, jint jarg7) {
  jlong jresult = 0 ;
  int arg1 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  int arg7 ;
  MessageReplaceRule *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  arg7 = (int)jarg7; 
  result = (MessageReplaceRule *)new MessageReplaceRule(arg1,arg2,arg3,arg4,arg5,arg6,arg7);
  *(MessageReplaceRule **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_MessageReplaceRule_1Match(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  MessageReplaceRule *arg1 = (MessageReplaceRule *) 0 ;
  player_msghdr_t *arg2 = (player_msghdr_t *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(MessageReplaceRule **)&jarg1; 
  arg2 = *(player_msghdr_t **)&jarg2; 
  result = (bool)(arg1)->Match(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_MessageReplaceRule_1Equivalent(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jint jarg4, jint jarg5, jint jarg6, jint jarg7) {
  jboolean jresult = 0 ;
  MessageReplaceRule *arg1 = (MessageReplaceRule *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  int arg7 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MessageReplaceRule **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  arg7 = (int)jarg7; 
  result = (bool)(arg1)->Equivalent(arg2,arg3,arg4,arg5,arg6,arg7);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_MessageReplaceRule_1replace_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  MessageReplaceRule *arg1 = (MessageReplaceRule *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MessageReplaceRule **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->replace = arg2;
  
}


SWIGEXPORT jint JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_MessageReplaceRule_1replace_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  MessageReplaceRule *arg1 = (MessageReplaceRule *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MessageReplaceRule **)&jarg1; 
  result = (int) ((arg1)->replace);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_MessageReplaceRule_1next_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  MessageReplaceRule *arg1 = (MessageReplaceRule *) 0 ;
  MessageReplaceRule *arg2 = (MessageReplaceRule *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(MessageReplaceRule **)&jarg1; 
  arg2 = *(MessageReplaceRule **)&jarg2; 
  if (arg1) (arg1)->next = arg2;
  
}


SWIGEXPORT jlong JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_MessageReplaceRule_1next_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  MessageReplaceRule *arg1 = (MessageReplaceRule *) 0 ;
  MessageReplaceRule *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MessageReplaceRule **)&jarg1; 
  result = (MessageReplaceRule *) ((arg1)->next);
  *(MessageReplaceRule **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_delete_1MessageReplaceRule(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  MessageReplaceRule *arg1 = (MessageReplaceRule *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(MessageReplaceRule **)&jarg1; 
  delete arg1;
  
}


SWIGEXPORT jlong JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_new_1MessageQueue(JNIEnv *jenv, jclass jcls, jboolean jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  bool arg1 ;
  size_t arg2 ;
  MessageQueue *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = jarg1 ? true : false; 
  arg2 = (size_t)jarg2; 
  result = (MessageQueue *)new MessageQueue(arg1,arg2);
  *(MessageQueue **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_delete_1MessageQueue(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  MessageQueue *arg1 = (MessageQueue *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(MessageQueue **)&jarg1; 
  delete arg1;
  
}


SWIGEXPORT jboolean JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_MessageQueue_1Empty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  MessageQueue *arg1 = (MessageQueue *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MessageQueue **)&jarg1; 
  result = (bool)(arg1)->Empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_MessageQueue_1Push(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  MessageQueue *arg1 = (MessageQueue *) 0 ;
  Message *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(MessageQueue **)&jarg1; 
  arg2 = *(Message **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Message & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->Push(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_MessageQueue_1PushFront(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jboolean jarg3) {
  MessageQueue *arg1 = (MessageQueue *) 0 ;
  Message *arg2 = 0 ;
  bool arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(MessageQueue **)&jarg1; 
  arg2 = *(Message **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Message & reference is null");
    return ;
  } 
  arg3 = jarg3 ? true : false; 
  (arg1)->PushFront(*arg2,arg3);
}


SWIGEXPORT void JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_MessageQueue_1PushBack(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jboolean jarg3) {
  MessageQueue *arg1 = (MessageQueue *) 0 ;
  Message *arg2 = 0 ;
  bool arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(MessageQueue **)&jarg1; 
  arg2 = *(Message **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Message & reference is null");
    return ;
  } 
  arg3 = jarg3 ? true : false; 
  (arg1)->PushBack(*arg2,arg3);
}


SWIGEXPORT jlong JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_MessageQueue_1Pop(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  MessageQueue *arg1 = (MessageQueue *) 0 ;
  Message *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MessageQueue **)&jarg1; 
  result = (Message *)(arg1)->Pop();
  *(Message **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_MessageQueue_1SetReplace(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  MessageQueue *arg1 = (MessageQueue *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MessageQueue **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetReplace(arg2);
}


SWIGEXPORT void JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_MessageQueue_1AddReplaceRule_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jint jarg4, jint jarg5, jint jarg6, jint jarg7, jint jarg8) {
  MessageQueue *arg1 = (MessageQueue *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  int arg7 ;
  int arg8 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MessageQueue **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  arg7 = (int)jarg7; 
  arg8 = (int)jarg8; 
  (arg1)->AddReplaceRule(arg2,arg3,arg4,arg5,arg6,arg7,arg8);
}


SWIGEXPORT void JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_MessageQueue_1AddReplaceRule_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3, jint jarg4, jint jarg5) {
  MessageQueue *arg1 = (MessageQueue *) 0 ;
  player_devaddr_t *arg2 = 0 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(MessageQueue **)&jarg1; 
  arg2 = *(player_devaddr_t **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "player_devaddr_t const & reference is null");
    return ;
  } 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  (arg1)->AddReplaceRule((player_devaddr_t const &)*arg2,arg3,arg4,arg5);
}


SWIGEXPORT jint JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_MessageQueue_1CheckReplace(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  MessageQueue *arg1 = (MessageQueue *) 0 ;
  player_msghdr_t *arg2 = (player_msghdr_t *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(MessageQueue **)&jarg1; 
  arg2 = *(player_msghdr_t **)&jarg2; 
  result = (int)(arg1)->CheckReplace(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_MessageQueue_1Wait_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  jboolean jresult = 0 ;
  MessageQueue *arg1 = (MessageQueue *) 0 ;
  double arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MessageQueue **)&jarg1; 
  arg2 = (double)jarg2; 
  result = (bool)(arg1)->Wait(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_MessageQueue_1Wait_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  MessageQueue *arg1 = (MessageQueue *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MessageQueue **)&jarg1; 
  result = (bool)(arg1)->Wait();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_MessageQueue_1DataAvailable(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  MessageQueue *arg1 = (MessageQueue *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MessageQueue **)&jarg1; 
  (arg1)->DataAvailable();
}


SWIGEXPORT jboolean JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_MessageQueue_1Filter(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  MessageQueue *arg1 = (MessageQueue *) 0 ;
  Message *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(MessageQueue **)&jarg1; 
  arg2 = *(Message **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Message & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->Filter(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_MessageQueue_1ClearFilter(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  MessageQueue *arg1 = (MessageQueue *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MessageQueue **)&jarg1; 
  (arg1)->ClearFilter();
}


SWIGEXPORT void JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_MessageQueue_1SetFilter(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jint jarg4, jint jarg5, jint jarg6, jint jarg7) {
  MessageQueue *arg1 = (MessageQueue *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  int arg7 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MessageQueue **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  arg7 = (int)jarg7; 
  (arg1)->SetFilter(arg2,arg3,arg4,arg5,arg6,arg7);
}


SWIGEXPORT void JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_MessageQueue_1SetPull(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  MessageQueue *arg1 = (MessageQueue *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MessageQueue **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetPull(arg2);
}


SWIGEXPORT jlong JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_MessageQueue_1GetLength(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  MessageQueue *arg1 = (MessageQueue *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MessageQueue **)&jarg1; 
  result = (arg1)->GetLength();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_MessageQueue_1SetDataRequested(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2, jboolean jarg3) {
  MessageQueue *arg1 = (MessageQueue *) 0 ;
  bool arg2 ;
  bool arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MessageQueue **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  arg3 = jarg3 ? true : false; 
  (arg1)->SetDataRequested(arg2,arg3);
}


SWIGEXPORT jint JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_PLAYER_1MAX_1MESSAGE_1SIZE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int) 8388608;
  
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_PLAYER_1MAX_1DRIVER_1STRING_1LEN_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int) 64;
  
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_PLAYER_1MAX_1DEVICES_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int) 4096;
  
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_PLAYER_1MSGQUEUE_1DEFAULT_1MAXLEN_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int) 1024;
  
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_PLAYER_1IDENT_1STRING_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *) "Player v.";
  
  if(result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_PLAYER_1IDENT_1STRLEN_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int) 32;
  
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_PLAYER_1KEYLEN_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int) 32;
  
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_PLAYER_1MSGTYPE_1DATA_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int) 1;
  
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_PLAYER_1MSGTYPE_1CMD_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int) 2;
  
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_PLAYER_1MSGTYPE_1REQ_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int) 3;
  
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_PLAYER_1MSGTYPE_1RESP_1ACK_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int) 4;
  
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_PLAYER_1MSGTYPE_1SYNCH_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int) 5;
  
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_PLAYER_1MSGTYPE_1RESP_1NACK_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int) 6;
  
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_player_1devaddr_1t_1host_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  player_devaddr_t *arg1 = (player_devaddr_t *) 0 ;
  uint32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(player_devaddr_t **)&jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->host = arg2;
  
}


SWIGEXPORT jlong JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_player_1devaddr_1t_1host_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  player_devaddr_t *arg1 = (player_devaddr_t *) 0 ;
  uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(player_devaddr_t **)&jarg1; 
  result = (uint32_t) ((arg1)->host);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_player_1devaddr_1t_1robot_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  player_devaddr_t *arg1 = (player_devaddr_t *) 0 ;
  uint32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(player_devaddr_t **)&jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->robot = arg2;
  
}


SWIGEXPORT jlong JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_player_1devaddr_1t_1robot_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  player_devaddr_t *arg1 = (player_devaddr_t *) 0 ;
  uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(player_devaddr_t **)&jarg1; 
  result = (uint32_t) ((arg1)->robot);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_player_1devaddr_1t_1interf_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  player_devaddr_t *arg1 = (player_devaddr_t *) 0 ;
  uint16_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(player_devaddr_t **)&jarg1; 
  arg2 = (uint16_t)jarg2; 
  if (arg1) (arg1)->interf = arg2;
  
}


SWIGEXPORT jint JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_player_1devaddr_1t_1interf_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  player_devaddr_t *arg1 = (player_devaddr_t *) 0 ;
  uint16_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(player_devaddr_t **)&jarg1; 
  result = (uint16_t) ((arg1)->interf);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_player_1devaddr_1t_1index_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  player_devaddr_t *arg1 = (player_devaddr_t *) 0 ;
  uint16_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(player_devaddr_t **)&jarg1; 
  arg2 = (uint16_t)jarg2; 
  if (arg1) (arg1)->index = arg2;
  
}


SWIGEXPORT jint JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_player_1devaddr_1t_1index_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  player_devaddr_t *arg1 = (player_devaddr_t *) 0 ;
  uint16_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(player_devaddr_t **)&jarg1; 
  result = (uint16_t) ((arg1)->index);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_new_1player_1devaddr_1t(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  player_devaddr_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (player_devaddr_t *)new player_devaddr_t();
  *(player_devaddr_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_delete_1player_1devaddr_1t(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  player_devaddr_t *arg1 = (player_devaddr_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(player_devaddr_t **)&jarg1; 
  delete arg1;
  
}


SWIGEXPORT void JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_player_1msghdr_1t_1addr_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  player_msghdr_t *arg1 = (player_msghdr_t *) 0 ;
  player_devaddr_t *arg2 = (player_devaddr_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(player_msghdr_t **)&jarg1; 
  arg2 = *(player_devaddr_t **)&jarg2; 
  if (arg1) (arg1)->addr = *arg2;
  
}


SWIGEXPORT jlong JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_player_1msghdr_1t_1addr_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  player_msghdr_t *arg1 = (player_msghdr_t *) 0 ;
  player_devaddr_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(player_msghdr_t **)&jarg1; 
  result = (player_devaddr_t *)& ((arg1)->addr);
  *(player_devaddr_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_player_1msghdr_1t_1type_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  player_msghdr_t *arg1 = (player_msghdr_t *) 0 ;
  uint8_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(player_msghdr_t **)&jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->type = arg2;
  
}


SWIGEXPORT jshort JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_player_1msghdr_1t_1type_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  player_msghdr_t *arg1 = (player_msghdr_t *) 0 ;
  uint8_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(player_msghdr_t **)&jarg1; 
  result = (uint8_t) ((arg1)->type);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_player_1msghdr_1t_1subtype_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  player_msghdr_t *arg1 = (player_msghdr_t *) 0 ;
  uint8_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(player_msghdr_t **)&jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->subtype = arg2;
  
}


SWIGEXPORT jshort JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_player_1msghdr_1t_1subtype_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  player_msghdr_t *arg1 = (player_msghdr_t *) 0 ;
  uint8_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(player_msghdr_t **)&jarg1; 
  result = (uint8_t) ((arg1)->subtype);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_player_1msghdr_1t_1timestamp_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  player_msghdr_t *arg1 = (player_msghdr_t *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(player_msghdr_t **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->timestamp = arg2;
  
}


SWIGEXPORT jdouble JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_player_1msghdr_1t_1timestamp_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  player_msghdr_t *arg1 = (player_msghdr_t *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(player_msghdr_t **)&jarg1; 
  result = (double) ((arg1)->timestamp);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_player_1msghdr_1t_1seq_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  player_msghdr_t *arg1 = (player_msghdr_t *) 0 ;
  uint32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(player_msghdr_t **)&jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->seq = arg2;
  
}


SWIGEXPORT jlong JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_player_1msghdr_1t_1seq_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  player_msghdr_t *arg1 = (player_msghdr_t *) 0 ;
  uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(player_msghdr_t **)&jarg1; 
  result = (uint32_t) ((arg1)->seq);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_player_1msghdr_1t_1size_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  player_msghdr_t *arg1 = (player_msghdr_t *) 0 ;
  uint32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(player_msghdr_t **)&jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->size = arg2;
  
}


SWIGEXPORT jlong JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_player_1msghdr_1t_1size_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  player_msghdr_t *arg1 = (player_msghdr_t *) 0 ;
  uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(player_msghdr_t **)&jarg1; 
  result = (uint32_t) ((arg1)->size);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_new_1player_1msghdr_1t(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  player_msghdr_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (player_msghdr_t *)new player_msghdr_t();
  *(player_msghdr_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_delete_1player_1msghdr_1t(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  player_msghdr_t *arg1 = (player_msghdr_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(player_msghdr_t **)&jarg1; 
  delete arg1;
  
}


SWIGEXPORT jlong JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_new_1player_1null_1t(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  player_null_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (player_null_t *)new player_null_t();
  *(player_null_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_delete_1player_1null_1t(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  player_null_t *arg1 = (player_null_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(player_null_t **)&jarg1; 
  delete arg1;
  
}


SWIGEXPORT void JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_player_1point_12d_1t_1px_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  player_point_2d_t *arg1 = (player_point_2d_t *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(player_point_2d_t **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->px = arg2;
  
}


SWIGEXPORT jdouble JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_player_1point_12d_1t_1px_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  player_point_2d_t *arg1 = (player_point_2d_t *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(player_point_2d_t **)&jarg1; 
  result = (double) ((arg1)->px);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_player_1point_12d_1t_1py_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  player_point_2d_t *arg1 = (player_point_2d_t *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(player_point_2d_t **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->py = arg2;
  
}


SWIGEXPORT jdouble JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_player_1point_12d_1t_1py_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  player_point_2d_t *arg1 = (player_point_2d_t *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(player_point_2d_t **)&jarg1; 
  result = (double) ((arg1)->py);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_new_1player_1point_12d_1t(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  player_point_2d_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (player_point_2d_t *)new player_point_2d_t();
  *(player_point_2d_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_delete_1player_1point_12d_1t(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  player_point_2d_t *arg1 = (player_point_2d_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(player_point_2d_t **)&jarg1; 
  delete arg1;
  
}


SWIGEXPORT void JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_player_1point_13d_1t_1px_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  player_point_3d_t *arg1 = (player_point_3d_t *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(player_point_3d_t **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->px = arg2;
  
}


SWIGEXPORT jdouble JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_player_1point_13d_1t_1px_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  player_point_3d_t *arg1 = (player_point_3d_t *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(player_point_3d_t **)&jarg1; 
  result = (double) ((arg1)->px);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_player_1point_13d_1t_1py_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  player_point_3d_t *arg1 = (player_point_3d_t *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(player_point_3d_t **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->py = arg2;
  
}


SWIGEXPORT jdouble JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_player_1point_13d_1t_1py_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  player_point_3d_t *arg1 = (player_point_3d_t *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(player_point_3d_t **)&jarg1; 
  result = (double) ((arg1)->py);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_player_1point_13d_1t_1pz_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  player_point_3d_t *arg1 = (player_point_3d_t *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(player_point_3d_t **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->pz = arg2;
  
}


SWIGEXPORT jdouble JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_player_1point_13d_1t_1pz_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  player_point_3d_t *arg1 = (player_point_3d_t *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(player_point_3d_t **)&jarg1; 
  result = (double) ((arg1)->pz);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_new_1player_1point_13d_1t(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  player_point_3d_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (player_point_3d_t *)new player_point_3d_t();
  *(player_point_3d_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_delete_1player_1point_13d_1t(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  player_point_3d_t *arg1 = (player_point_3d_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(player_point_3d_t **)&jarg1; 
  delete arg1;
  
}


SWIGEXPORT void JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_player_1orientation_13d_1t_1proll_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  player_orientation_3d_t *arg1 = (player_orientation_3d_t *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(player_orientation_3d_t **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->proll = arg2;
  
}


SWIGEXPORT jdouble JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_player_1orientation_13d_1t_1proll_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  player_orientation_3d_t *arg1 = (player_orientation_3d_t *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(player_orientation_3d_t **)&jarg1; 
  result = (double) ((arg1)->proll);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_player_1orientation_13d_1t_1ppitch_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  player_orientation_3d_t *arg1 = (player_orientation_3d_t *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(player_orientation_3d_t **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->ppitch = arg2;
  
}


SWIGEXPORT jdouble JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_player_1orientation_13d_1t_1ppitch_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  player_orientation_3d_t *arg1 = (player_orientation_3d_t *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(player_orientation_3d_t **)&jarg1; 
  result = (double) ((arg1)->ppitch);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_player_1orientation_13d_1t_1pyaw_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  player_orientation_3d_t *arg1 = (player_orientation_3d_t *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(player_orientation_3d_t **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->pyaw = arg2;
  
}


SWIGEXPORT jdouble JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_player_1orientation_13d_1t_1pyaw_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  player_orientation_3d_t *arg1 = (player_orientation_3d_t *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(player_orientation_3d_t **)&jarg1; 
  result = (double) ((arg1)->pyaw);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_new_1player_1orientation_13d_1t(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  player_orientation_3d_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (player_orientation_3d_t *)new player_orientation_3d_t();
  *(player_orientation_3d_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_delete_1player_1orientation_13d_1t(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  player_orientation_3d_t *arg1 = (player_orientation_3d_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(player_orientation_3d_t **)&jarg1; 
  delete arg1;
  
}


SWIGEXPORT void JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_player_1pose2d_1t_1px_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  player_pose2d_t *arg1 = (player_pose2d_t *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(player_pose2d_t **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->px = arg2;
  
}


SWIGEXPORT jdouble JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_player_1pose2d_1t_1px_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  player_pose2d_t *arg1 = (player_pose2d_t *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(player_pose2d_t **)&jarg1; 
  result = (double) ((arg1)->px);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_player_1pose2d_1t_1py_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  player_pose2d_t *arg1 = (player_pose2d_t *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(player_pose2d_t **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->py = arg2;
  
}


SWIGEXPORT jdouble JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_player_1pose2d_1t_1py_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  player_pose2d_t *arg1 = (player_pose2d_t *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(player_pose2d_t **)&jarg1; 
  result = (double) ((arg1)->py);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_player_1pose2d_1t_1pa_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  player_pose2d_t *arg1 = (player_pose2d_t *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(player_pose2d_t **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->pa = arg2;
  
}


SWIGEXPORT jdouble JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_player_1pose2d_1t_1pa_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  player_pose2d_t *arg1 = (player_pose2d_t *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(player_pose2d_t **)&jarg1; 
  result = (double) ((arg1)->pa);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_new_1player_1pose2d_1t(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  player_pose2d_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (player_pose2d_t *)new player_pose2d_t();
  *(player_pose2d_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_delete_1player_1pose2d_1t(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  player_pose2d_t *arg1 = (player_pose2d_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(player_pose2d_t **)&jarg1; 
  delete arg1;
  
}


SWIGEXPORT void JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_player_1pose3d_1t_1px_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  player_pose3d_t *arg1 = (player_pose3d_t *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(player_pose3d_t **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->px = arg2;
  
}


SWIGEXPORT jdouble JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_player_1pose3d_1t_1px_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  player_pose3d_t *arg1 = (player_pose3d_t *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(player_pose3d_t **)&jarg1; 
  result = (double) ((arg1)->px);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_player_1pose3d_1t_1py_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  player_pose3d_t *arg1 = (player_pose3d_t *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(player_pose3d_t **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->py = arg2;
  
}


SWIGEXPORT jdouble JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_player_1pose3d_1t_1py_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  player_pose3d_t *arg1 = (player_pose3d_t *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(player_pose3d_t **)&jarg1; 
  result = (double) ((arg1)->py);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_player_1pose3d_1t_1pz_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  player_pose3d_t *arg1 = (player_pose3d_t *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(player_pose3d_t **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->pz = arg2;
  
}


SWIGEXPORT jdouble JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_player_1pose3d_1t_1pz_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  player_pose3d_t *arg1 = (player_pose3d_t *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(player_pose3d_t **)&jarg1; 
  result = (double) ((arg1)->pz);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_player_1pose3d_1t_1proll_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  player_pose3d_t *arg1 = (player_pose3d_t *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(player_pose3d_t **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->proll = arg2;
  
}


SWIGEXPORT jdouble JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_player_1pose3d_1t_1proll_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  player_pose3d_t *arg1 = (player_pose3d_t *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(player_pose3d_t **)&jarg1; 
  result = (double) ((arg1)->proll);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_player_1pose3d_1t_1ppitch_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  player_pose3d_t *arg1 = (player_pose3d_t *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(player_pose3d_t **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->ppitch = arg2;
  
}


SWIGEXPORT jdouble JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_player_1pose3d_1t_1ppitch_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  player_pose3d_t *arg1 = (player_pose3d_t *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(player_pose3d_t **)&jarg1; 
  result = (double) ((arg1)->ppitch);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_player_1pose3d_1t_1pyaw_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  player_pose3d_t *arg1 = (player_pose3d_t *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(player_pose3d_t **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->pyaw = arg2;
  
}


SWIGEXPORT jdouble JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_player_1pose3d_1t_1pyaw_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  player_pose3d_t *arg1 = (player_pose3d_t *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(player_pose3d_t **)&jarg1; 
  result = (double) ((arg1)->pyaw);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_new_1player_1pose3d_1t(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  player_pose3d_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (player_pose3d_t *)new player_pose3d_t();
  *(player_pose3d_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_delete_1player_1pose3d_1t(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  player_pose3d_t *arg1 = (player_pose3d_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(player_pose3d_t **)&jarg1; 
  delete arg1;
  
}


SWIGEXPORT void JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_player_1bbox2d_1t_1sw_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  player_bbox2d_t *arg1 = (player_bbox2d_t *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(player_bbox2d_t **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->sw = arg2;
  
}


SWIGEXPORT jdouble JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_player_1bbox2d_1t_1sw_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  player_bbox2d_t *arg1 = (player_bbox2d_t *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(player_bbox2d_t **)&jarg1; 
  result = (double) ((arg1)->sw);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_player_1bbox2d_1t_1sl_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  player_bbox2d_t *arg1 = (player_bbox2d_t *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(player_bbox2d_t **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->sl = arg2;
  
}


SWIGEXPORT jdouble JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_player_1bbox2d_1t_1sl_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  player_bbox2d_t *arg1 = (player_bbox2d_t *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(player_bbox2d_t **)&jarg1; 
  result = (double) ((arg1)->sl);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_new_1player_1bbox2d_1t(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  player_bbox2d_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (player_bbox2d_t *)new player_bbox2d_t();
  *(player_bbox2d_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_delete_1player_1bbox2d_1t(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  player_bbox2d_t *arg1 = (player_bbox2d_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(player_bbox2d_t **)&jarg1; 
  delete arg1;
  
}


SWIGEXPORT void JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_player_1bbox3d_1t_1sw_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  player_bbox3d_t *arg1 = (player_bbox3d_t *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(player_bbox3d_t **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->sw = arg2;
  
}


SWIGEXPORT jdouble JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_player_1bbox3d_1t_1sw_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  player_bbox3d_t *arg1 = (player_bbox3d_t *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(player_bbox3d_t **)&jarg1; 
  result = (double) ((arg1)->sw);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_player_1bbox3d_1t_1sl_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  player_bbox3d_t *arg1 = (player_bbox3d_t *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(player_bbox3d_t **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->sl = arg2;
  
}


SWIGEXPORT jdouble JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_player_1bbox3d_1t_1sl_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  player_bbox3d_t *arg1 = (player_bbox3d_t *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(player_bbox3d_t **)&jarg1; 
  result = (double) ((arg1)->sl);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_player_1bbox3d_1t_1sh_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  player_bbox3d_t *arg1 = (player_bbox3d_t *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(player_bbox3d_t **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->sh = arg2;
  
}


SWIGEXPORT jdouble JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_player_1bbox3d_1t_1sh_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  player_bbox3d_t *arg1 = (player_bbox3d_t *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(player_bbox3d_t **)&jarg1; 
  result = (double) ((arg1)->sh);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_new_1player_1bbox3d_1t(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  player_bbox3d_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (player_bbox3d_t *)new player_bbox3d_t();
  *(player_bbox3d_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_delete_1player_1bbox3d_1t(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  player_bbox3d_t *arg1 = (player_bbox3d_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(player_bbox3d_t **)&jarg1; 
  delete arg1;
  
}


SWIGEXPORT void JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_player_1blackboard_1entry_1t_1key_1count_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  player_blackboard_entry_t *arg1 = (player_blackboard_entry_t *) 0 ;
  uint32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(player_blackboard_entry_t **)&jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->key_count = arg2;
  
}


SWIGEXPORT jlong JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_player_1blackboard_1entry_1t_1key_1count_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  player_blackboard_entry_t *arg1 = (player_blackboard_entry_t *) 0 ;
  uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(player_blackboard_entry_t **)&jarg1; 
  result = (uint32_t) ((arg1)->key_count);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_player_1blackboard_1entry_1t_1key_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  player_blackboard_entry_t *arg1 = (player_blackboard_entry_t *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(player_blackboard_entry_t **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if (arg1->key) delete [] arg1->key;
    if (arg2) {
      arg1->key = (char *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->key, (const char *)arg2);
    } else {
      arg1->key = 0;
    }
  }
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_player_1blackboard_1entry_1t_1key_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  player_blackboard_entry_t *arg1 = (player_blackboard_entry_t *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(player_blackboard_entry_t **)&jarg1; 
  result = (char *) ((arg1)->key);
  if(result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_player_1blackboard_1entry_1t_1group_1count_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  player_blackboard_entry_t *arg1 = (player_blackboard_entry_t *) 0 ;
  uint32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(player_blackboard_entry_t **)&jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->group_count = arg2;
  
}


SWIGEXPORT jlong JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_player_1blackboard_1entry_1t_1group_1count_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  player_blackboard_entry_t *arg1 = (player_blackboard_entry_t *) 0 ;
  uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(player_blackboard_entry_t **)&jarg1; 
  result = (uint32_t) ((arg1)->group_count);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_player_1blackboard_1entry_1t_1group_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  player_blackboard_entry_t *arg1 = (player_blackboard_entry_t *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(player_blackboard_entry_t **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if (arg1->group) delete [] arg1->group;
    if (arg2) {
      arg1->group = (char *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->group, (const char *)arg2);
    } else {
      arg1->group = 0;
    }
  }
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_player_1blackboard_1entry_1t_1group_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  player_blackboard_entry_t *arg1 = (player_blackboard_entry_t *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(player_blackboard_entry_t **)&jarg1; 
  result = (char *) ((arg1)->group);
  if(result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_player_1blackboard_1entry_1t_1type_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  player_blackboard_entry_t *arg1 = (player_blackboard_entry_t *) 0 ;
  uint16_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(player_blackboard_entry_t **)&jarg1; 
  arg2 = (uint16_t)jarg2; 
  if (arg1) (arg1)->type = arg2;
  
}


SWIGEXPORT jint JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_player_1blackboard_1entry_1t_1type_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  player_blackboard_entry_t *arg1 = (player_blackboard_entry_t *) 0 ;
  uint16_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(player_blackboard_entry_t **)&jarg1; 
  result = (uint16_t) ((arg1)->type);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_player_1blackboard_1entry_1t_1subtype_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  player_blackboard_entry_t *arg1 = (player_blackboard_entry_t *) 0 ;
  uint16_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(player_blackboard_entry_t **)&jarg1; 
  arg2 = (uint16_t)jarg2; 
  if (arg1) (arg1)->subtype = arg2;
  
}


SWIGEXPORT jint JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_player_1blackboard_1entry_1t_1subtype_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  player_blackboard_entry_t *arg1 = (player_blackboard_entry_t *) 0 ;
  uint16_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(player_blackboard_entry_t **)&jarg1; 
  result = (uint16_t) ((arg1)->subtype);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_player_1blackboard_1entry_1t_1data_1count_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  player_blackboard_entry_t *arg1 = (player_blackboard_entry_t *) 0 ;
  uint32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(player_blackboard_entry_t **)&jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->data_count = arg2;
  
}


SWIGEXPORT jlong JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_player_1blackboard_1entry_1t_1data_1count_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  player_blackboard_entry_t *arg1 = (player_blackboard_entry_t *) 0 ;
  uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(player_blackboard_entry_t **)&jarg1; 
  result = (uint32_t) ((arg1)->data_count);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_player_1blackboard_1entry_1t_1data_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  player_blackboard_entry_t *arg1 = (player_blackboard_entry_t *) 0 ;
  uint8_t *arg2 = (uint8_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(player_blackboard_entry_t **)&jarg1; 
  arg2 = *(uint8_t **)&jarg2; 
  if (arg1) (arg1)->data = arg2;
  
}


SWIGEXPORT jlong JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_player_1blackboard_1entry_1t_1data_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  player_blackboard_entry_t *arg1 = (player_blackboard_entry_t *) 0 ;
  uint8_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(player_blackboard_entry_t **)&jarg1; 
  result = (uint8_t *) ((arg1)->data);
  *(uint8_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_player_1blackboard_1entry_1t_1timestamp_1sec_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  player_blackboard_entry_t *arg1 = (player_blackboard_entry_t *) 0 ;
  uint32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(player_blackboard_entry_t **)&jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->timestamp_sec = arg2;
  
}


SWIGEXPORT jlong JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_player_1blackboard_1entry_1t_1timestamp_1sec_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  player_blackboard_entry_t *arg1 = (player_blackboard_entry_t *) 0 ;
  uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(player_blackboard_entry_t **)&jarg1; 
  result = (uint32_t) ((arg1)->timestamp_sec);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_player_1blackboard_1entry_1t_1timestamp_1usec_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  player_blackboard_entry_t *arg1 = (player_blackboard_entry_t *) 0 ;
  uint32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(player_blackboard_entry_t **)&jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->timestamp_usec = arg2;
  
}


SWIGEXPORT jlong JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_player_1blackboard_1entry_1t_1timestamp_1usec_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  player_blackboard_entry_t *arg1 = (player_blackboard_entry_t *) 0 ;
  uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(player_blackboard_entry_t **)&jarg1; 
  result = (uint32_t) ((arg1)->timestamp_usec);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_new_1player_1blackboard_1entry_1t(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  player_blackboard_entry_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (player_blackboard_entry_t *)new player_blackboard_entry_t();
  *(player_blackboard_entry_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_delete_1player_1blackboard_1entry_1t(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  player_blackboard_entry_t *arg1 = (player_blackboard_entry_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(player_blackboard_entry_t **)&jarg1; 
  delete arg1;
  
}


SWIGEXPORT void JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_player_1segment_1t_1x0_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  player_segment_t *arg1 = (player_segment_t *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(player_segment_t **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->x0 = arg2;
  
}


SWIGEXPORT jdouble JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_player_1segment_1t_1x0_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  player_segment_t *arg1 = (player_segment_t *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(player_segment_t **)&jarg1; 
  result = (double) ((arg1)->x0);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_player_1segment_1t_1y0_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  player_segment_t *arg1 = (player_segment_t *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(player_segment_t **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->y0 = arg2;
  
}


SWIGEXPORT jdouble JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_player_1segment_1t_1y0_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  player_segment_t *arg1 = (player_segment_t *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(player_segment_t **)&jarg1; 
  result = (double) ((arg1)->y0);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_player_1segment_1t_1x1_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  player_segment_t *arg1 = (player_segment_t *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(player_segment_t **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->x1 = arg2;
  
}


SWIGEXPORT jdouble JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_player_1segment_1t_1x1_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  player_segment_t *arg1 = (player_segment_t *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(player_segment_t **)&jarg1; 
  result = (double) ((arg1)->x1);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_player_1segment_1t_1y1_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  player_segment_t *arg1 = (player_segment_t *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(player_segment_t **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->y1 = arg2;
  
}


SWIGEXPORT jdouble JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_player_1segment_1t_1y1_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  player_segment_t *arg1 = (player_segment_t *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(player_segment_t **)&jarg1; 
  result = (double) ((arg1)->y1);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_new_1player_1segment_1t(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  player_segment_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (player_segment_t *)new player_segment_t();
  *(player_segment_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_delete_1player_1segment_1t(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  player_segment_t *arg1 = (player_segment_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(player_segment_t **)&jarg1; 
  delete arg1;
  
}


SWIGEXPORT void JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_player_1extent2d_1t_1x0_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  player_extent2d_t *arg1 = (player_extent2d_t *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(player_extent2d_t **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->x0 = arg2;
  
}


SWIGEXPORT jdouble JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_player_1extent2d_1t_1x0_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  player_extent2d_t *arg1 = (player_extent2d_t *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(player_extent2d_t **)&jarg1; 
  result = (double) ((arg1)->x0);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_player_1extent2d_1t_1y0_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  player_extent2d_t *arg1 = (player_extent2d_t *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(player_extent2d_t **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->y0 = arg2;
  
}


SWIGEXPORT jdouble JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_player_1extent2d_1t_1y0_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  player_extent2d_t *arg1 = (player_extent2d_t *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(player_extent2d_t **)&jarg1; 
  result = (double) ((arg1)->y0);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_player_1extent2d_1t_1x1_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  player_extent2d_t *arg1 = (player_extent2d_t *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(player_extent2d_t **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->x1 = arg2;
  
}


SWIGEXPORT jdouble JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_player_1extent2d_1t_1x1_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  player_extent2d_t *arg1 = (player_extent2d_t *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(player_extent2d_t **)&jarg1; 
  result = (double) ((arg1)->x1);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_player_1extent2d_1t_1y1_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  player_extent2d_t *arg1 = (player_extent2d_t *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(player_extent2d_t **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->y1 = arg2;
  
}


SWIGEXPORT jdouble JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_player_1extent2d_1t_1y1_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  player_extent2d_t *arg1 = (player_extent2d_t *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(player_extent2d_t **)&jarg1; 
  result = (double) ((arg1)->y1);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_new_1player_1extent2d_1t(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  player_extent2d_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (player_extent2d_t *)new player_extent2d_t();
  *(player_extent2d_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_delete_1player_1extent2d_1t(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  player_extent2d_t *arg1 = (player_extent2d_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(player_extent2d_t **)&jarg1; 
  delete arg1;
  
}


SWIGEXPORT void JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_player_1color_1t_1alpha_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  player_color_t *arg1 = (player_color_t *) 0 ;
  uint8_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(player_color_t **)&jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->alpha = arg2;
  
}


SWIGEXPORT jshort JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_player_1color_1t_1alpha_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  player_color_t *arg1 = (player_color_t *) 0 ;
  uint8_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(player_color_t **)&jarg1; 
  result = (uint8_t) ((arg1)->alpha);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_player_1color_1t_1red_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  player_color_t *arg1 = (player_color_t *) 0 ;
  uint8_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(player_color_t **)&jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->red = arg2;
  
}


SWIGEXPORT jshort JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_player_1color_1t_1red_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  player_color_t *arg1 = (player_color_t *) 0 ;
  uint8_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(player_color_t **)&jarg1; 
  result = (uint8_t) ((arg1)->red);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_player_1color_1t_1green_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  player_color_t *arg1 = (player_color_t *) 0 ;
  uint8_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(player_color_t **)&jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->green = arg2;
  
}


SWIGEXPORT jshort JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_player_1color_1t_1green_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  player_color_t *arg1 = (player_color_t *) 0 ;
  uint8_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(player_color_t **)&jarg1; 
  result = (uint8_t) ((arg1)->green);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_player_1color_1t_1blue_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  player_color_t *arg1 = (player_color_t *) 0 ;
  uint8_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(player_color_t **)&jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->blue = arg2;
  
}


SWIGEXPORT jshort JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_player_1color_1t_1blue_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  player_color_t *arg1 = (player_color_t *) 0 ;
  uint8_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(player_color_t **)&jarg1; 
  result = (uint8_t) ((arg1)->blue);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_new_1player_1color_1t(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  player_color_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (player_color_t *)new player_color_t();
  *(player_color_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_delete_1player_1color_1t(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  player_color_t *arg1 = (player_color_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(player_color_t **)&jarg1; 
  delete arg1;
  
}


SWIGEXPORT void JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_player_1bool_1t_1state_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  player_bool_t *arg1 = (player_bool_t *) 0 ;
  uint8_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(player_bool_t **)&jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->state = arg2;
  
}


SWIGEXPORT jshort JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_player_1bool_1t_1state_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  player_bool_t *arg1 = (player_bool_t *) 0 ;
  uint8_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(player_bool_t **)&jarg1; 
  result = (uint8_t) ((arg1)->state);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_new_1player_1bool_1t(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  player_bool_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (player_bool_t *)new player_bool_t();
  *(player_bool_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_delete_1player_1bool_1t(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  player_bool_t *arg1 = (player_bool_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(player_bool_t **)&jarg1; 
  delete arg1;
  
}


SWIGEXPORT void JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_player_1uint32_1t_1value_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  player_uint32_t *arg1 = (player_uint32_t *) 0 ;
  uint32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(player_uint32_t **)&jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->value = arg2;
  
}


SWIGEXPORT jlong JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_player_1uint32_1t_1value_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  player_uint32_t *arg1 = (player_uint32_t *) 0 ;
  uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(player_uint32_t **)&jarg1; 
  result = (uint32_t) ((arg1)->value);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_new_1player_1uint32_1t(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  player_uint32_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (player_uint32_t *)new player_uint32_t();
  *(player_uint32_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_delete_1player_1uint32_1t(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  player_uint32_t *arg1 = (player_uint32_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(player_uint32_t **)&jarg1; 
  delete arg1;
  
}


SWIGEXPORT jint JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_PLAYER_1CAPABILTIES_1REQ_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int) 255;
  
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_player_1capabilities_1req_1t_1type_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  player_capabilities_req_t *arg1 = (player_capabilities_req_t *) 0 ;
  uint32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(player_capabilities_req_t **)&jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->type = arg2;
  
}


SWIGEXPORT jlong JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_player_1capabilities_1req_1t_1type_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  player_capabilities_req_t *arg1 = (player_capabilities_req_t *) 0 ;
  uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(player_capabilities_req_t **)&jarg1; 
  result = (uint32_t) ((arg1)->type);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_player_1capabilities_1req_1t_1subtype_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  player_capabilities_req_t *arg1 = (player_capabilities_req_t *) 0 ;
  uint32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(player_capabilities_req_t **)&jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->subtype = arg2;
  
}


SWIGEXPORT jlong JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_player_1capabilities_1req_1t_1subtype_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  player_capabilities_req_t *arg1 = (player_capabilities_req_t *) 0 ;
  uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(player_capabilities_req_t **)&jarg1; 
  result = (uint32_t) ((arg1)->subtype);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_new_1player_1capabilities_1req_1t(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  player_capabilities_req_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (player_capabilities_req_t *)new player_capabilities_req_t();
  *(player_capabilities_req_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_delete_1player_1capabilities_1req_1t(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  player_capabilities_req_t *arg1 = (player_capabilities_req_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(player_capabilities_req_t **)&jarg1; 
  delete arg1;
  
}


SWIGEXPORT jint JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_PLAYER_1GET_1INTPROP_1REQ_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int) 254;
  
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_PLAYER_1SET_1INTPROP_1REQ_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int) 253;
  
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_PLAYER_1GET_1DBLPROP_1REQ_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int) 252;
  
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_PLAYER_1SET_1DBLPROP_1REQ_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int) 251;
  
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_PLAYER_1GET_1STRPROP_1REQ_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int) 250;
  
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_PLAYER_1SET_1STRPROP_1REQ_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int) 249;
  
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_player_1intprop_1req_1t_1key_1count_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  player_intprop_req_t *arg1 = (player_intprop_req_t *) 0 ;
  uint32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(player_intprop_req_t **)&jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->key_count = arg2;
  
}


SWIGEXPORT jlong JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_player_1intprop_1req_1t_1key_1count_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  player_intprop_req_t *arg1 = (player_intprop_req_t *) 0 ;
  uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(player_intprop_req_t **)&jarg1; 
  result = (uint32_t) ((arg1)->key_count);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_player_1intprop_1req_1t_1key_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  player_intprop_req_t *arg1 = (player_intprop_req_t *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(player_intprop_req_t **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if (arg1->key) delete [] arg1->key;
    if (arg2) {
      arg1->key = (char *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->key, (const char *)arg2);
    } else {
      arg1->key = 0;
    }
  }
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_player_1intprop_1req_1t_1key_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  player_intprop_req_t *arg1 = (player_intprop_req_t *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(player_intprop_req_t **)&jarg1; 
  result = (char *) ((arg1)->key);
  if(result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_player_1intprop_1req_1t_1value_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  player_intprop_req_t *arg1 = (player_intprop_req_t *) 0 ;
  int32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(player_intprop_req_t **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->value = arg2;
  
}


SWIGEXPORT jint JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_player_1intprop_1req_1t_1value_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  player_intprop_req_t *arg1 = (player_intprop_req_t *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(player_intprop_req_t **)&jarg1; 
  result = (int32_t) ((arg1)->value);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_new_1player_1intprop_1req_1t(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  player_intprop_req_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (player_intprop_req_t *)new player_intprop_req_t();
  *(player_intprop_req_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_delete_1player_1intprop_1req_1t(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  player_intprop_req_t *arg1 = (player_intprop_req_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(player_intprop_req_t **)&jarg1; 
  delete arg1;
  
}


SWIGEXPORT void JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_player_1dblprop_1req_1t_1key_1count_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  player_dblprop_req_t *arg1 = (player_dblprop_req_t *) 0 ;
  uint32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(player_dblprop_req_t **)&jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->key_count = arg2;
  
}


SWIGEXPORT jlong JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_player_1dblprop_1req_1t_1key_1count_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  player_dblprop_req_t *arg1 = (player_dblprop_req_t *) 0 ;
  uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(player_dblprop_req_t **)&jarg1; 
  result = (uint32_t) ((arg1)->key_count);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_player_1dblprop_1req_1t_1key_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  player_dblprop_req_t *arg1 = (player_dblprop_req_t *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(player_dblprop_req_t **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if (arg1->key) delete [] arg1->key;
    if (arg2) {
      arg1->key = (char *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->key, (const char *)arg2);
    } else {
      arg1->key = 0;
    }
  }
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_player_1dblprop_1req_1t_1key_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  player_dblprop_req_t *arg1 = (player_dblprop_req_t *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(player_dblprop_req_t **)&jarg1; 
  result = (char *) ((arg1)->key);
  if(result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_player_1dblprop_1req_1t_1value_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  player_dblprop_req_t *arg1 = (player_dblprop_req_t *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(player_dblprop_req_t **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->value = arg2;
  
}


SWIGEXPORT jdouble JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_player_1dblprop_1req_1t_1value_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  player_dblprop_req_t *arg1 = (player_dblprop_req_t *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(player_dblprop_req_t **)&jarg1; 
  result = (double) ((arg1)->value);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_new_1player_1dblprop_1req_1t(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  player_dblprop_req_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (player_dblprop_req_t *)new player_dblprop_req_t();
  *(player_dblprop_req_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_delete_1player_1dblprop_1req_1t(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  player_dblprop_req_t *arg1 = (player_dblprop_req_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(player_dblprop_req_t **)&jarg1; 
  delete arg1;
  
}


SWIGEXPORT void JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_player_1strprop_1req_1t_1key_1count_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  player_strprop_req_t *arg1 = (player_strprop_req_t *) 0 ;
  uint32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(player_strprop_req_t **)&jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->key_count = arg2;
  
}


SWIGEXPORT jlong JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_player_1strprop_1req_1t_1key_1count_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  player_strprop_req_t *arg1 = (player_strprop_req_t *) 0 ;
  uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(player_strprop_req_t **)&jarg1; 
  result = (uint32_t) ((arg1)->key_count);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_player_1strprop_1req_1t_1key_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  player_strprop_req_t *arg1 = (player_strprop_req_t *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(player_strprop_req_t **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if (arg1->key) delete [] arg1->key;
    if (arg2) {
      arg1->key = (char *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->key, (const char *)arg2);
    } else {
      arg1->key = 0;
    }
  }
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_player_1strprop_1req_1t_1key_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  player_strprop_req_t *arg1 = (player_strprop_req_t *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(player_strprop_req_t **)&jarg1; 
  result = (char *) ((arg1)->key);
  if(result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_player_1strprop_1req_1t_1value_1count_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  player_strprop_req_t *arg1 = (player_strprop_req_t *) 0 ;
  uint32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(player_strprop_req_t **)&jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->value_count = arg2;
  
}


SWIGEXPORT jlong JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_player_1strprop_1req_1t_1value_1count_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  player_strprop_req_t *arg1 = (player_strprop_req_t *) 0 ;
  uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(player_strprop_req_t **)&jarg1; 
  result = (uint32_t) ((arg1)->value_count);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_player_1strprop_1req_1t_1value_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  player_strprop_req_t *arg1 = (player_strprop_req_t *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(player_strprop_req_t **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if (arg1->value) delete [] arg1->value;
    if (arg2) {
      arg1->value = (char *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->value, (const char *)arg2);
    } else {
      arg1->value = 0;
    }
  }
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_player_1strprop_1req_1t_1value_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  player_strprop_req_t *arg1 = (player_strprop_req_t *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(player_strprop_req_t **)&jarg1; 
  result = (char *) ((arg1)->value);
  if(result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_new_1player_1strprop_1req_1t(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  player_strprop_req_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (player_strprop_req_t *)new player_strprop_req_t();
  *(player_strprop_req_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_delete_1player_1strprop_1req_1t(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  player_strprop_req_t *arg1 = (player_strprop_req_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(player_strprop_req_t **)&jarg1; 
  delete arg1;
  
}


SWIGEXPORT jdouble JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_M_1PI_1get(JNIEnv *jenv, jclass jcls) {
  jdouble jresult = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  result = (double) 3.14159265358979323846;
  
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_PlayerTime_1GetTime(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jint jresult = 0 ;
  PlayerTime *arg1 = (PlayerTime *) 0 ;
  timeval *arg2 = (timeval *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(PlayerTime **)&jarg1; 
  arg2 = *(timeval **)&jarg2; 
  result = (int)(arg1)->GetTime(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_PlayerTime_1GetTimeDouble(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jint jresult = 0 ;
  PlayerTime *arg1 = (PlayerTime *) 0 ;
  double *arg2 = (double *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(PlayerTime **)&jarg1; 
  arg2 = *(double **)&jarg2; 
  result = (int)(arg1)->GetTimeDouble(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_delete_1PlayerTime(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  PlayerTime *arg1 = (PlayerTime *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(PlayerTime **)&jarg1; 
  delete arg1;
  
}


SWIGEXPORT void JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_packedaddr_1to_1dottedip(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jlong jarg3) {
  char *arg1 = (char *) 0 ;
  size_t arg2 ;
  uint32_t arg3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return ;
  }
  arg2 = (size_t)jarg2; 
  arg3 = (uint32_t)jarg3; 
  packedaddr_to_dottedip(arg1,arg2,arg3);
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
}


SWIGEXPORT void JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_player_1register_1drivers(JNIEnv *jenv, jclass jcls) {
  (void)jenv;
  (void)jcls;
  player_register_drivers();
}


SWIGEXPORT jlong JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_player_1devaddr_1t_1sizeof(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  result = player_devaddr_t_sizeof();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_buf_1to_1player_1devaddr_1t(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  void *arg1 = (void *) 0 ;
  player_devaddr_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(void **)&jarg1; 
  result = (player_devaddr_t *)buf_to_player_devaddr_t(arg1);
  *(player_devaddr_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_player_1devaddr_1t_1to_1buf(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  player_devaddr_t *arg1 = (player_devaddr_t *) 0 ;
  void *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(player_devaddr_t **)&jarg1; 
  result = (void *)player_devaddr_t_to_buf(arg1);
  *(void **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_player_1msghdr_1t_1sizeof(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  result = player_msghdr_t_sizeof();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_buf_1to_1player_1msghdr_1t(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  void *arg1 = (void *) 0 ;
  player_msghdr_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(void **)&jarg1; 
  result = (player_msghdr_t *)buf_to_player_msghdr_t(arg1);
  *(player_msghdr_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_player_1msghdr_1t_1to_1buf(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  player_msghdr_t *arg1 = (player_msghdr_t *) 0 ;
  void *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(player_msghdr_t **)&jarg1; 
  result = (void *)player_msghdr_t_to_buf(arg1);
  *(void **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_player_1null_1t_1sizeof(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  result = player_null_t_sizeof();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_buf_1to_1player_1null_1t(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  void *arg1 = (void *) 0 ;
  player_null_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(void **)&jarg1; 
  result = (player_null_t *)buf_to_player_null_t(arg1);
  *(player_null_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_player_1null_1t_1to_1buf(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  player_null_t *arg1 = (player_null_t *) 0 ;
  void *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(player_null_t **)&jarg1; 
  result = (void *)player_null_t_to_buf(arg1);
  *(void **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_player_1point_12d_1t_1sizeof(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  result = player_point_2d_t_sizeof();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_buf_1to_1player_1point_12d_1t(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  void *arg1 = (void *) 0 ;
  player_point_2d_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(void **)&jarg1; 
  result = (player_point_2d_t *)buf_to_player_point_2d_t(arg1);
  *(player_point_2d_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_player_1point_12d_1t_1to_1buf(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  player_point_2d_t *arg1 = (player_point_2d_t *) 0 ;
  void *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(player_point_2d_t **)&jarg1; 
  result = (void *)player_point_2d_t_to_buf(arg1);
  *(void **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_player_1point_13d_1t_1sizeof(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  result = player_point_3d_t_sizeof();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_buf_1to_1player_1point_13d_1t(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  void *arg1 = (void *) 0 ;
  player_point_3d_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(void **)&jarg1; 
  result = (player_point_3d_t *)buf_to_player_point_3d_t(arg1);
  *(player_point_3d_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_player_1point_13d_1t_1to_1buf(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  player_point_3d_t *arg1 = (player_point_3d_t *) 0 ;
  void *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(player_point_3d_t **)&jarg1; 
  result = (void *)player_point_3d_t_to_buf(arg1);
  *(void **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_player_1orientation_13d_1t_1sizeof(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  result = player_orientation_3d_t_sizeof();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_buf_1to_1player_1orientation_13d_1t(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  void *arg1 = (void *) 0 ;
  player_orientation_3d_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(void **)&jarg1; 
  result = (player_orientation_3d_t *)buf_to_player_orientation_3d_t(arg1);
  *(player_orientation_3d_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_player_1orientation_13d_1t_1to_1buf(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  player_orientation_3d_t *arg1 = (player_orientation_3d_t *) 0 ;
  void *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(player_orientation_3d_t **)&jarg1; 
  result = (void *)player_orientation_3d_t_to_buf(arg1);
  *(void **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_player_1pose2d_1t_1sizeof(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  result = player_pose2d_t_sizeof();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_buf_1to_1player_1pose2d_1t(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  void *arg1 = (void *) 0 ;
  player_pose2d_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(void **)&jarg1; 
  result = (player_pose2d_t *)buf_to_player_pose2d_t(arg1);
  *(player_pose2d_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_player_1pose2d_1t_1to_1buf(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  player_pose2d_t *arg1 = (player_pose2d_t *) 0 ;
  void *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(player_pose2d_t **)&jarg1; 
  result = (void *)player_pose2d_t_to_buf(arg1);
  *(void **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_player_1pose3d_1t_1sizeof(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  result = player_pose3d_t_sizeof();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_buf_1to_1player_1pose3d_1t(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  void *arg1 = (void *) 0 ;
  player_pose3d_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(void **)&jarg1; 
  result = (player_pose3d_t *)buf_to_player_pose3d_t(arg1);
  *(player_pose3d_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_player_1pose3d_1t_1to_1buf(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  player_pose3d_t *arg1 = (player_pose3d_t *) 0 ;
  void *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(player_pose3d_t **)&jarg1; 
  result = (void *)player_pose3d_t_to_buf(arg1);
  *(void **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_player_1bbox2d_1t_1sizeof(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  result = player_bbox2d_t_sizeof();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_buf_1to_1player_1bbox2d_1t(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  void *arg1 = (void *) 0 ;
  player_bbox2d_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(void **)&jarg1; 
  result = (player_bbox2d_t *)buf_to_player_bbox2d_t(arg1);
  *(player_bbox2d_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_player_1bbox2d_1t_1to_1buf(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  player_bbox2d_t *arg1 = (player_bbox2d_t *) 0 ;
  void *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(player_bbox2d_t **)&jarg1; 
  result = (void *)player_bbox2d_t_to_buf(arg1);
  *(void **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_player_1bbox3d_1t_1sizeof(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  result = player_bbox3d_t_sizeof();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_buf_1to_1player_1bbox3d_1t(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  void *arg1 = (void *) 0 ;
  player_bbox3d_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(void **)&jarg1; 
  result = (player_bbox3d_t *)buf_to_player_bbox3d_t(arg1);
  *(player_bbox3d_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_player_1bbox3d_1t_1to_1buf(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  player_bbox3d_t *arg1 = (player_bbox3d_t *) 0 ;
  void *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(player_bbox3d_t **)&jarg1; 
  result = (void *)player_bbox3d_t_to_buf(arg1);
  *(void **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_player_1blackboard_1entry_1t_1sizeof(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  result = player_blackboard_entry_t_sizeof();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_buf_1to_1player_1blackboard_1entry_1t(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  void *arg1 = (void *) 0 ;
  player_blackboard_entry_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(void **)&jarg1; 
  result = (player_blackboard_entry_t *)buf_to_player_blackboard_entry_t(arg1);
  *(player_blackboard_entry_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_player_1blackboard_1entry_1t_1to_1buf(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  player_blackboard_entry_t *arg1 = (player_blackboard_entry_t *) 0 ;
  void *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(player_blackboard_entry_t **)&jarg1; 
  result = (void *)player_blackboard_entry_t_to_buf(arg1);
  *(void **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_player_1segment_1t_1sizeof(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  result = player_segment_t_sizeof();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_buf_1to_1player_1segment_1t(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  void *arg1 = (void *) 0 ;
  player_segment_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(void **)&jarg1; 
  result = (player_segment_t *)buf_to_player_segment_t(arg1);
  *(player_segment_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_player_1segment_1t_1to_1buf(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  player_segment_t *arg1 = (player_segment_t *) 0 ;
  void *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(player_segment_t **)&jarg1; 
  result = (void *)player_segment_t_to_buf(arg1);
  *(void **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_player_1extent2d_1t_1sizeof(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  result = player_extent2d_t_sizeof();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_buf_1to_1player_1extent2d_1t(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  void *arg1 = (void *) 0 ;
  player_extent2d_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(void **)&jarg1; 
  result = (player_extent2d_t *)buf_to_player_extent2d_t(arg1);
  *(player_extent2d_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_player_1extent2d_1t_1to_1buf(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  player_extent2d_t *arg1 = (player_extent2d_t *) 0 ;
  void *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(player_extent2d_t **)&jarg1; 
  result = (void *)player_extent2d_t_to_buf(arg1);
  *(void **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_player_1color_1t_1sizeof(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  result = player_color_t_sizeof();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_buf_1to_1player_1color_1t(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  void *arg1 = (void *) 0 ;
  player_color_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(void **)&jarg1; 
  result = (player_color_t *)buf_to_player_color_t(arg1);
  *(player_color_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_player_1color_1t_1to_1buf(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  player_color_t *arg1 = (player_color_t *) 0 ;
  void *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(player_color_t **)&jarg1; 
  result = (void *)player_color_t_to_buf(arg1);
  *(void **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_player_1bool_1t_1sizeof(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  result = player_bool_t_sizeof();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_buf_1to_1player_1bool_1t(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  void *arg1 = (void *) 0 ;
  player_bool_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(void **)&jarg1; 
  result = (player_bool_t *)buf_to_player_bool_t(arg1);
  *(player_bool_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_player_1bool_1t_1to_1buf(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  player_bool_t *arg1 = (player_bool_t *) 0 ;
  void *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(player_bool_t **)&jarg1; 
  result = (void *)player_bool_t_to_buf(arg1);
  *(void **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_player_1uint32_1t_1sizeof(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  result = player_uint32_t_sizeof();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_buf_1to_1player_1uint32_1t(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  void *arg1 = (void *) 0 ;
  player_uint32_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(void **)&jarg1; 
  result = (player_uint32_t *)buf_to_player_uint32_t(arg1);
  *(player_uint32_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_player_1uint32_1t_1to_1buf(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  player_uint32_t *arg1 = (player_uint32_t *) 0 ;
  void *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(player_uint32_t **)&jarg1; 
  result = (void *)player_uint32_t_to_buf(arg1);
  *(void **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_player_1capabilities_1req_1t_1sizeof(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  result = player_capabilities_req_t_sizeof();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_buf_1to_1player_1capabilities_1req_1t(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  void *arg1 = (void *) 0 ;
  player_capabilities_req_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(void **)&jarg1; 
  result = (player_capabilities_req_t *)buf_to_player_capabilities_req_t(arg1);
  *(player_capabilities_req_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_player_1capabilities_1req_1t_1to_1buf(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  player_capabilities_req_t *arg1 = (player_capabilities_req_t *) 0 ;
  void *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(player_capabilities_req_t **)&jarg1; 
  result = (void *)player_capabilities_req_t_to_buf(arg1);
  *(void **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_player_1intprop_1req_1t_1sizeof(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  result = player_intprop_req_t_sizeof();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_buf_1to_1player_1intprop_1req_1t(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  void *arg1 = (void *) 0 ;
  player_intprop_req_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(void **)&jarg1; 
  result = (player_intprop_req_t *)buf_to_player_intprop_req_t(arg1);
  *(player_intprop_req_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_player_1intprop_1req_1t_1to_1buf(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  player_intprop_req_t *arg1 = (player_intprop_req_t *) 0 ;
  void *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(player_intprop_req_t **)&jarg1; 
  result = (void *)player_intprop_req_t_to_buf(arg1);
  *(void **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_player_1dblprop_1req_1t_1sizeof(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  result = player_dblprop_req_t_sizeof();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_buf_1to_1player_1dblprop_1req_1t(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  void *arg1 = (void *) 0 ;
  player_dblprop_req_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(void **)&jarg1; 
  result = (player_dblprop_req_t *)buf_to_player_dblprop_req_t(arg1);
  *(player_dblprop_req_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_player_1dblprop_1req_1t_1to_1buf(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  player_dblprop_req_t *arg1 = (player_dblprop_req_t *) 0 ;
  void *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(player_dblprop_req_t **)&jarg1; 
  result = (void *)player_dblprop_req_t_to_buf(arg1);
  *(void **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_player_1strprop_1req_1t_1sizeof(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  result = player_strprop_req_t_sizeof();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_buf_1to_1player_1strprop_1req_1t(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  void *arg1 = (void *) 0 ;
  player_strprop_req_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(void **)&jarg1; 
  result = (player_strprop_req_t *)buf_to_player_strprop_req_t(arg1);
  *(player_strprop_req_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_player_1strprop_1req_1t_1to_1buf(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  player_strprop_req_t *arg1 = (player_strprop_req_t *) 0 ;
  void *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(player_strprop_req_t **)&jarg1; 
  result = (void *)player_strprop_req_t_to_buf(arg1);
  *(void **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_sourceforge_playerstage_Jplayercore_playercore_1javaJNI_swig_1module_1init(JNIEnv *jenv, jclass jcls) {
  int i;
  
  static struct {
    const char *method;
    const char *signature;
  } methods[24] = {
    {
      "SwigDirector_Driver_StartThread", "(Lnet/sourceforge/playerstage/Jplayercore/Driver;)V" 
    },
    {
      "SwigDirector_Driver_StopThread", "(Lnet/sourceforge/playerstage/Jplayercore/Driver;)V" 
    },
    {
      "SwigDirector_Driver_Publish__SWIG_0", "(Lnet/sourceforge/playerstage/Jplayercore/Driver;JJSSJJJZ)V" 
    },
    {
      "SwigDirector_Driver_Publish__SWIG_1", "(Lnet/sourceforge/playerstage/Jplayercore/Driver;JJSSJJJ)V" 
    },
    {
      "SwigDirector_Driver_Publish__SWIG_2", "(Lnet/sourceforge/playerstage/Jplayercore/Driver;JJSSJJ)V" 
    },
    {
      "SwigDirector_Driver_Publish__SWIG_3", "(Lnet/sourceforge/playerstage/Jplayercore/Driver;JJSSJ)V" 
    },
    {
      "SwigDirector_Driver_Publish__SWIG_4", "(Lnet/sourceforge/playerstage/Jplayercore/Driver;JJSS)V" 
    },
    {
      "SwigDirector_Driver_Publish__SWIG_5", "(Lnet/sourceforge/playerstage/Jplayercore/Driver;JSSJJJZ)V" 
    },
    {
      "SwigDirector_Driver_Publish__SWIG_6", "(Lnet/sourceforge/playerstage/Jplayercore/Driver;JSSJJJ)V" 
    },
    {
      "SwigDirector_Driver_Publish__SWIG_7", "(Lnet/sourceforge/playerstage/Jplayercore/Driver;JSSJJ)V" 
    },
    {
      "SwigDirector_Driver_Publish__SWIG_8", "(Lnet/sourceforge/playerstage/Jplayercore/Driver;JSSJ)V" 
    },
    {
      "SwigDirector_Driver_Publish__SWIG_9", "(Lnet/sourceforge/playerstage/Jplayercore/Driver;JSS)V" 
    },
    {
      "SwigDirector_Driver_Publish__SWIG_10", "(Lnet/sourceforge/playerstage/Jplayercore/Driver;JJJZ)V" 
    },
    {
      "SwigDirector_Driver_Publish__SWIG_11", "(Lnet/sourceforge/playerstage/Jplayercore/Driver;JJJ)V" 
    },
    {
      "SwigDirector_Driver_Publish__SWIG_12", "(Lnet/sourceforge/playerstage/Jplayercore/Driver;JJZ)V" 
    },
    {
      "SwigDirector_Driver_Publish__SWIG_13", "(Lnet/sourceforge/playerstage/Jplayercore/Driver;JJ)V" 
    },
    {
      "SwigDirector_Driver_Setup", "(Lnet/sourceforge/playerstage/Jplayercore/Driver;)I" 
    },
    {
      "SwigDirector_Driver_Shutdown", "(Lnet/sourceforge/playerstage/Jplayercore/Driver;)I" 
    },
    {
      "SwigDirector_Driver_Main", "(Lnet/sourceforge/playerstage/Jplayercore/Driver;)V" 
    },
    {
      "SwigDirector_Driver_MainQuit", "(Lnet/sourceforge/playerstage/Jplayercore/Driver;)V" 
    },
    {
      "SwigDirector_Driver_Update", "(Lnet/sourceforge/playerstage/Jplayercore/Driver;)V" 
    },
    {
      "SwigDirector_Driver_ProcessInternalMessages", "(Lnet/sourceforge/playerstage/Jplayercore/Driver;JJJ)I" 
    },
    {
      "SwigDirector_Driver_RegisterProperty__SWIG_0", "(Lnet/sourceforge/playerstage/Jplayercore/Driver;Ljava/lang/String;JJI)Z" 
    },
    {
      "SwigDirector_Driver_RegisterProperty__SWIG_1", "(Lnet/sourceforge/playerstage/Jplayercore/Driver;JJI)Z" 
    }
  };
  Swig::jclass_playercore_javaJNI = (jclass) jenv->NewGlobalRef(jcls);
  if (!Swig::jclass_playercore_javaJNI) return;
  for (i = 0; i < (int) (sizeof(methods)/sizeof(methods[0])); ++i) {
    Swig::director_methids[i] = jenv->GetStaticMethodID(jcls, methods[i].method, methods[i].signature);
    if (!Swig::director_methids[i]) return;
  }
}


#ifdef __cplusplus
}
#endif

